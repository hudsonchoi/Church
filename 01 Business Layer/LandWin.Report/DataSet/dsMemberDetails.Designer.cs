//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LandWin.Report.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsMemberDetails")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsMemberDetails : global::System.Data.DataSet {
        
        private dtMemberInfoDataTable tabledtMemberInfo;
        
        private dtFamilyInfoDataTable tabledtFamilyInfo;
        
        private dtCellInfoDataTable tabledtCellInfo;
        
        private dtFellowshipDataTable tabledtFellowship;
        
        private dtMinistryInfoDataTable tabledtMinistryInfo;
        
        private dtCoursesDataTable tabledtCourses;
        
        private dtCommentDataTable tabledtComment;
        
        private global::System.Data.DataRelation relationdtMemberInfo_dtCellInfo;
        
        private global::System.Data.DataRelation relationdtMemberInfo_dtFellowship;
        
        private global::System.Data.DataRelation relationdtMemberInfo_dtMinistryInfo;
        
        private global::System.Data.DataRelation relationdtMemberInfo_dtCourses;
        
        private global::System.Data.DataRelation relationdtMemberInfo_dtComment;
        
        private global::System.Data.DataRelation relationdtMemberInfo_dtFamilyInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsMemberDetails() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsMemberDetails(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtMemberInfo"] != null)) {
                    base.Tables.Add(new dtMemberInfoDataTable(ds.Tables["dtMemberInfo"]));
                }
                if ((ds.Tables["dtFamilyInfo"] != null)) {
                    base.Tables.Add(new dtFamilyInfoDataTable(ds.Tables["dtFamilyInfo"]));
                }
                if ((ds.Tables["dtCellInfo"] != null)) {
                    base.Tables.Add(new dtCellInfoDataTable(ds.Tables["dtCellInfo"]));
                }
                if ((ds.Tables["dtFellowship"] != null)) {
                    base.Tables.Add(new dtFellowshipDataTable(ds.Tables["dtFellowship"]));
                }
                if ((ds.Tables["dtMinistryInfo"] != null)) {
                    base.Tables.Add(new dtMinistryInfoDataTable(ds.Tables["dtMinistryInfo"]));
                }
                if ((ds.Tables["dtCourses"] != null)) {
                    base.Tables.Add(new dtCoursesDataTable(ds.Tables["dtCourses"]));
                }
                if ((ds.Tables["dtComment"] != null)) {
                    base.Tables.Add(new dtCommentDataTable(ds.Tables["dtComment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMemberInfoDataTable dtMemberInfo {
            get {
                return this.tabledtMemberInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtFamilyInfoDataTable dtFamilyInfo {
            get {
                return this.tabledtFamilyInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCellInfoDataTable dtCellInfo {
            get {
                return this.tabledtCellInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtFellowshipDataTable dtFellowship {
            get {
                return this.tabledtFellowship;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMinistryInfoDataTable dtMinistryInfo {
            get {
                return this.tabledtMinistryInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCoursesDataTable dtCourses {
            get {
                return this.tabledtCourses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCommentDataTable dtComment {
            get {
                return this.tabledtComment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsMemberDetails cln = ((dsMemberDetails)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtMemberInfo"] != null)) {
                    base.Tables.Add(new dtMemberInfoDataTable(ds.Tables["dtMemberInfo"]));
                }
                if ((ds.Tables["dtFamilyInfo"] != null)) {
                    base.Tables.Add(new dtFamilyInfoDataTable(ds.Tables["dtFamilyInfo"]));
                }
                if ((ds.Tables["dtCellInfo"] != null)) {
                    base.Tables.Add(new dtCellInfoDataTable(ds.Tables["dtCellInfo"]));
                }
                if ((ds.Tables["dtFellowship"] != null)) {
                    base.Tables.Add(new dtFellowshipDataTable(ds.Tables["dtFellowship"]));
                }
                if ((ds.Tables["dtMinistryInfo"] != null)) {
                    base.Tables.Add(new dtMinistryInfoDataTable(ds.Tables["dtMinistryInfo"]));
                }
                if ((ds.Tables["dtCourses"] != null)) {
                    base.Tables.Add(new dtCoursesDataTable(ds.Tables["dtCourses"]));
                }
                if ((ds.Tables["dtComment"] != null)) {
                    base.Tables.Add(new dtCommentDataTable(ds.Tables["dtComment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtMemberInfo = ((dtMemberInfoDataTable)(base.Tables["dtMemberInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtMemberInfo != null)) {
                    this.tabledtMemberInfo.InitVars();
                }
            }
            this.tabledtFamilyInfo = ((dtFamilyInfoDataTable)(base.Tables["dtFamilyInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtFamilyInfo != null)) {
                    this.tabledtFamilyInfo.InitVars();
                }
            }
            this.tabledtCellInfo = ((dtCellInfoDataTable)(base.Tables["dtCellInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtCellInfo != null)) {
                    this.tabledtCellInfo.InitVars();
                }
            }
            this.tabledtFellowship = ((dtFellowshipDataTable)(base.Tables["dtFellowship"]));
            if ((initTable == true)) {
                if ((this.tabledtFellowship != null)) {
                    this.tabledtFellowship.InitVars();
                }
            }
            this.tabledtMinistryInfo = ((dtMinistryInfoDataTable)(base.Tables["dtMinistryInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtMinistryInfo != null)) {
                    this.tabledtMinistryInfo.InitVars();
                }
            }
            this.tabledtCourses = ((dtCoursesDataTable)(base.Tables["dtCourses"]));
            if ((initTable == true)) {
                if ((this.tabledtCourses != null)) {
                    this.tabledtCourses.InitVars();
                }
            }
            this.tabledtComment = ((dtCommentDataTable)(base.Tables["dtComment"]));
            if ((initTable == true)) {
                if ((this.tabledtComment != null)) {
                    this.tabledtComment.InitVars();
                }
            }
            this.relationdtMemberInfo_dtCellInfo = this.Relations["dtMemberInfo_dtCellInfo"];
            this.relationdtMemberInfo_dtFellowship = this.Relations["dtMemberInfo_dtFellowship"];
            this.relationdtMemberInfo_dtMinistryInfo = this.Relations["dtMemberInfo_dtMinistryInfo"];
            this.relationdtMemberInfo_dtCourses = this.Relations["dtMemberInfo_dtCourses"];
            this.relationdtMemberInfo_dtComment = this.Relations["dtMemberInfo_dtComment"];
            this.relationdtMemberInfo_dtFamilyInfo = this.Relations["dtMemberInfo_dtFamilyInfo"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsMemberDetails";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsMemberDetails.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtMemberInfo = new dtMemberInfoDataTable();
            base.Tables.Add(this.tabledtMemberInfo);
            this.tabledtFamilyInfo = new dtFamilyInfoDataTable();
            base.Tables.Add(this.tabledtFamilyInfo);
            this.tabledtCellInfo = new dtCellInfoDataTable();
            base.Tables.Add(this.tabledtCellInfo);
            this.tabledtFellowship = new dtFellowshipDataTable();
            base.Tables.Add(this.tabledtFellowship);
            this.tabledtMinistryInfo = new dtMinistryInfoDataTable();
            base.Tables.Add(this.tabledtMinistryInfo);
            this.tabledtCourses = new dtCoursesDataTable();
            base.Tables.Add(this.tabledtCourses);
            this.tabledtComment = new dtCommentDataTable();
            base.Tables.Add(this.tabledtComment);
            this.relationdtMemberInfo_dtCellInfo = new global::System.Data.DataRelation("dtMemberInfo_dtCellInfo", new global::System.Data.DataColumn[] {
                        this.tabledtMemberInfo.MemberIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtCellInfo.MemberIdColumn}, false);
            this.Relations.Add(this.relationdtMemberInfo_dtCellInfo);
            this.relationdtMemberInfo_dtFellowship = new global::System.Data.DataRelation("dtMemberInfo_dtFellowship", new global::System.Data.DataColumn[] {
                        this.tabledtMemberInfo.MemberIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtFellowship.MemberIdColumn}, false);
            this.Relations.Add(this.relationdtMemberInfo_dtFellowship);
            this.relationdtMemberInfo_dtMinistryInfo = new global::System.Data.DataRelation("dtMemberInfo_dtMinistryInfo", new global::System.Data.DataColumn[] {
                        this.tabledtMemberInfo.MemberIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtMinistryInfo.MemberIdColumn}, false);
            this.Relations.Add(this.relationdtMemberInfo_dtMinistryInfo);
            this.relationdtMemberInfo_dtCourses = new global::System.Data.DataRelation("dtMemberInfo_dtCourses", new global::System.Data.DataColumn[] {
                        this.tabledtMemberInfo.MemberIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtCourses.MemberIdColumn}, false);
            this.Relations.Add(this.relationdtMemberInfo_dtCourses);
            this.relationdtMemberInfo_dtComment = new global::System.Data.DataRelation("dtMemberInfo_dtComment", new global::System.Data.DataColumn[] {
                        this.tabledtMemberInfo.MemberIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtComment.MemberIdColumn}, false);
            this.Relations.Add(this.relationdtMemberInfo_dtComment);
            this.relationdtMemberInfo_dtFamilyInfo = new global::System.Data.DataRelation("dtMemberInfo_dtFamilyInfo", new global::System.Data.DataColumn[] {
                        this.tabledtMemberInfo.FamilyIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtFamilyInfo.FamilyIdColumn}, false);
            this.Relations.Add(this.relationdtMemberInfo_dtFamilyInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMemberInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtFamilyInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCellInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtFellowship() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMinistryInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCourses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtComment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsMemberDetails ds = new dsMemberDetails();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtMemberInfoRowChangeEventHandler(object sender, dtMemberInfoRowChangeEvent e);
        
        public delegate void dtFamilyInfoRowChangeEventHandler(object sender, dtFamilyInfoRowChangeEvent e);
        
        public delegate void dtCellInfoRowChangeEventHandler(object sender, dtCellInfoRowChangeEvent e);
        
        public delegate void dtFellowshipRowChangeEventHandler(object sender, dtFellowshipRowChangeEvent e);
        
        public delegate void dtMinistryInfoRowChangeEventHandler(object sender, dtMinistryInfoRowChangeEvent e);
        
        public delegate void dtCoursesRowChangeEventHandler(object sender, dtCoursesRowChangeEvent e);
        
        public delegate void dtCommentRowChangeEventHandler(object sender, dtCommentRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMemberInfoDataTable : global::System.Data.TypedTableBase<dtMemberInfoRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnEn_Name;
            
            private global::System.Data.DataColumn columnSex;
            
            private global::System.Data.DataColumn columnBirthday;
            
            private global::System.Data.DataColumn columnEntryDate;
            
            private global::System.Data.DataColumn columnEntryType;
            
            private global::System.Data.DataColumn columnCellname;
            
            private global::System.Data.DataColumn columnCellRole;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZipcode;
            
            private global::System.Data.DataColumn columnSubDivision;
            
            private global::System.Data.DataColumn columnRelationship;
            
            private global::System.Data.DataColumn columnCellphone;
            
            private global::System.Data.DataColumn columnJob;
            
            private global::System.Data.DataColumn columnJobType;
            
            private global::System.Data.DataColumn columnMarried;
            
            private global::System.Data.DataColumn columnSpouseName;
            
            private global::System.Data.DataColumn columnBaptism;
            
            private global::System.Data.DataColumn columnBaptismDate;
            
            private global::System.Data.DataColumn columnOffice;
            
            private global::System.Data.DataColumn columnFellowship;
            
            private global::System.Data.DataColumn columnFellowshipDate;
            
            private global::System.Data.DataColumn columnMinistryList;
            
            private global::System.Data.DataColumn columnFamilyId;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnImage;
            
            private global::System.Data.DataColumn columnHome;
            
            private global::System.Data.DataColumn columnAge;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoDataTable() {
                this.TableName = "dtMemberInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMemberInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMemberInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn En_NameColumn {
                get {
                    return this.columnEn_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthdayColumn {
                get {
                    return this.columnBirthday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryDateColumn {
                get {
                    return this.columnEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryTypeColumn {
                get {
                    return this.columnEntryType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellnameColumn {
                get {
                    return this.columnCellname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellRoleColumn {
                get {
                    return this.columnCellRole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipcodeColumn {
                get {
                    return this.columnZipcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubDivisionColumn {
                get {
                    return this.columnSubDivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationshipColumn {
                get {
                    return this.columnRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellphoneColumn {
                get {
                    return this.columnCellphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobColumn {
                get {
                    return this.columnJob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobTypeColumn {
                get {
                    return this.columnJobType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarriedColumn {
                get {
                    return this.columnMarried;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpouseNameColumn {
                get {
                    return this.columnSpouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaptismColumn {
                get {
                    return this.columnBaptism;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaptismDateColumn {
                get {
                    return this.columnBaptismDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OfficeColumn {
                get {
                    return this.columnOffice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FellowshipColumn {
                get {
                    return this.columnFellowship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FellowshipDateColumn {
                get {
                    return this.columnFellowshipDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinistryListColumn {
                get {
                    return this.columnMinistryList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyIdColumn {
                get {
                    return this.columnFamilyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomeColumn {
                get {
                    return this.columnHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow this[int index] {
                get {
                    return ((dtMemberInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtMemberInfoRowChangeEventHandler dtMemberInfoRowChanging;
            
            public event dtMemberInfoRowChangeEventHandler dtMemberInfoRowChanged;
            
            public event dtMemberInfoRowChangeEventHandler dtMemberInfoRowDeleting;
            
            public event dtMemberInfoRowChangeEventHandler dtMemberInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMemberInfoRow(dtMemberInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow AdddtMemberInfoRow(
                        int MemberId, 
                        string Name, 
                        string En_Name, 
                        string Sex, 
                        System.DateTime Birthday, 
                        System.DateTime EntryDate, 
                        string EntryType, 
                        string Cellname, 
                        string CellRole, 
                        string Address, 
                        string City, 
                        string State, 
                        string Zipcode, 
                        string SubDivision, 
                        string Relationship, 
                        string Cellphone, 
                        string Job, 
                        string JobType, 
                        string Married, 
                        string SpouseName, 
                        string Baptism, 
                        System.DateTime BaptismDate, 
                        string Office, 
                        string Fellowship, 
                        System.DateTime FellowshipDate, 
                        string MinistryList, 
                        int FamilyId, 
                        string Email, 
                        byte[] Image, 
                        string Home, 
                        string Age) {
                dtMemberInfoRow rowdtMemberInfoRow = ((dtMemberInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MemberId,
                        Name,
                        En_Name,
                        Sex,
                        Birthday,
                        EntryDate,
                        EntryType,
                        Cellname,
                        CellRole,
                        Address,
                        City,
                        State,
                        Zipcode,
                        SubDivision,
                        Relationship,
                        Cellphone,
                        Job,
                        JobType,
                        Married,
                        SpouseName,
                        Baptism,
                        BaptismDate,
                        Office,
                        Fellowship,
                        FellowshipDate,
                        MinistryList,
                        FamilyId,
                        Email,
                        Image,
                        Home,
                        Age};
                rowdtMemberInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMemberInfoRow);
                return rowdtMemberInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow FindByMemberId(int MemberId) {
                return ((dtMemberInfoRow)(this.Rows.Find(new object[] {
                            MemberId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMemberInfoDataTable cln = ((dtMemberInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMemberInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnName = base.Columns["Name"];
                this.columnEn_Name = base.Columns["En_Name"];
                this.columnSex = base.Columns["Sex"];
                this.columnBirthday = base.Columns["Birthday"];
                this.columnEntryDate = base.Columns["EntryDate"];
                this.columnEntryType = base.Columns["EntryType"];
                this.columnCellname = base.Columns["Cellname"];
                this.columnCellRole = base.Columns["CellRole"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZipcode = base.Columns["Zipcode"];
                this.columnSubDivision = base.Columns["SubDivision"];
                this.columnRelationship = base.Columns["Relationship"];
                this.columnCellphone = base.Columns["Cellphone"];
                this.columnJob = base.Columns["Job"];
                this.columnJobType = base.Columns["JobType"];
                this.columnMarried = base.Columns["Married"];
                this.columnSpouseName = base.Columns["SpouseName"];
                this.columnBaptism = base.Columns["Baptism"];
                this.columnBaptismDate = base.Columns["BaptismDate"];
                this.columnOffice = base.Columns["Office"];
                this.columnFellowship = base.Columns["Fellowship"];
                this.columnFellowshipDate = base.Columns["FellowshipDate"];
                this.columnMinistryList = base.Columns["MinistryList"];
                this.columnFamilyId = base.Columns["FamilyId"];
                this.columnEmail = base.Columns["Email"];
                this.columnImage = base.Columns["Image"];
                this.columnHome = base.Columns["Home"];
                this.columnAge = base.Columns["Age"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnEn_Name = new global::System.Data.DataColumn("En_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEn_Name);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnBirthday = new global::System.Data.DataColumn("Birthday", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthday);
                this.columnEntryDate = new global::System.Data.DataColumn("EntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                this.columnEntryType = new global::System.Data.DataColumn("EntryType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryType);
                this.columnCellname = new global::System.Data.DataColumn("Cellname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellname);
                this.columnCellRole = new global::System.Data.DataColumn("CellRole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellRole);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZipcode = new global::System.Data.DataColumn("Zipcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipcode);
                this.columnSubDivision = new global::System.Data.DataColumn("SubDivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubDivision);
                this.columnRelationship = new global::System.Data.DataColumn("Relationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship);
                this.columnCellphone = new global::System.Data.DataColumn("Cellphone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellphone);
                this.columnJob = new global::System.Data.DataColumn("Job", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob);
                this.columnJobType = new global::System.Data.DataColumn("JobType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobType);
                this.columnMarried = new global::System.Data.DataColumn("Married", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarried);
                this.columnSpouseName = new global::System.Data.DataColumn("SpouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpouseName);
                this.columnBaptism = new global::System.Data.DataColumn("Baptism", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaptism);
                this.columnBaptismDate = new global::System.Data.DataColumn("BaptismDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaptismDate);
                this.columnOffice = new global::System.Data.DataColumn("Office", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffice);
                this.columnFellowship = new global::System.Data.DataColumn("Fellowship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFellowship);
                this.columnFellowshipDate = new global::System.Data.DataColumn("FellowshipDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFellowshipDate);
                this.columnMinistryList = new global::System.Data.DataColumn("MinistryList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinistryList);
                this.columnFamilyId = new global::System.Data.DataColumn("FamilyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyId);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.columnHome = new global::System.Data.DataColumn("Home", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHome);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMemberId}, true));
                this.columnMemberId.AllowDBNull = false;
                this.columnMemberId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow NewdtMemberInfoRow() {
                return ((dtMemberInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMemberInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMemberInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMemberInfoRowChanged != null)) {
                    this.dtMemberInfoRowChanged(this, new dtMemberInfoRowChangeEvent(((dtMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMemberInfoRowChanging != null)) {
                    this.dtMemberInfoRowChanging(this, new dtMemberInfoRowChangeEvent(((dtMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMemberInfoRowDeleted != null)) {
                    this.dtMemberInfoRowDeleted(this, new dtMemberInfoRowChangeEvent(((dtMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMemberInfoRowDeleting != null)) {
                    this.dtMemberInfoRowDeleting(this, new dtMemberInfoRowChangeEvent(((dtMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMemberInfoRow(dtMemberInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMemberInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtFamilyInfoDataTable : global::System.Data.TypedTableBase<dtFamilyInfoRow> {
            
            private global::System.Data.DataColumn columnFamilyId;
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnBirthdate;
            
            private global::System.Data.DataColumn columnFellowship;
            
            private global::System.Data.DataColumn columnBaptism;
            
            private global::System.Data.DataColumn columnRelationship;
            
            private global::System.Data.DataColumn columnJob;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnSubDivision;
            
            private global::System.Data.DataColumn columnSex;
            
            private global::System.Data.DataColumn columnCellphone;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoDataTable() {
                this.TableName = "dtFamilyInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFamilyInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtFamilyInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyIdColumn {
                get {
                    return this.columnFamilyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthdateColumn {
                get {
                    return this.columnBirthdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FellowshipColumn {
                get {
                    return this.columnFellowship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaptismColumn {
                get {
                    return this.columnBaptism;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationshipColumn {
                get {
                    return this.columnRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobColumn {
                get {
                    return this.columnJob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubDivisionColumn {
                get {
                    return this.columnSubDivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellphoneColumn {
                get {
                    return this.columnCellphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow this[int index] {
                get {
                    return ((dtFamilyInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowChanging;
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowChanged;
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowDeleting;
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtFamilyInfoRow(dtFamilyInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow AdddtFamilyInfoRow(dtMemberInfoRow parentdtMemberInfoRowBydtMemberInfo_dtFamilyInfo, int MemberId, string Name, System.DateTime Birthdate, string Fellowship, string Baptism, string Relationship, string Job, string Email, string SubDivision, string Sex, string Cellphone) {
                dtFamilyInfoRow rowdtFamilyInfoRow = ((dtFamilyInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MemberId,
                        Name,
                        Birthdate,
                        Fellowship,
                        Baptism,
                        Relationship,
                        Job,
                        Email,
                        SubDivision,
                        Sex,
                        Cellphone};
                if ((parentdtMemberInfoRowBydtMemberInfo_dtFamilyInfo != null)) {
                    columnValuesArray[0] = parentdtMemberInfoRowBydtMemberInfo_dtFamilyInfo[26];
                }
                rowdtFamilyInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtFamilyInfoRow);
                return rowdtFamilyInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow FindByMemberId(int MemberId) {
                return ((dtFamilyInfoRow)(this.Rows.Find(new object[] {
                            MemberId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtFamilyInfoDataTable cln = ((dtFamilyInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtFamilyInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFamilyId = base.Columns["FamilyId"];
                this.columnMemberId = base.Columns["MemberId"];
                this.columnName = base.Columns["Name"];
                this.columnBirthdate = base.Columns["Birthdate"];
                this.columnFellowship = base.Columns["Fellowship"];
                this.columnBaptism = base.Columns["Baptism"];
                this.columnRelationship = base.Columns["Relationship"];
                this.columnJob = base.Columns["Job"];
                this.columnEmail = base.Columns["Email"];
                this.columnSubDivision = base.Columns["SubDivision"];
                this.columnSex = base.Columns["Sex"];
                this.columnCellphone = base.Columns["Cellphone"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFamilyId = new global::System.Data.DataColumn("FamilyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyId);
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnBirthdate = new global::System.Data.DataColumn("Birthdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthdate);
                this.columnFellowship = new global::System.Data.DataColumn("Fellowship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFellowship);
                this.columnBaptism = new global::System.Data.DataColumn("Baptism", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaptism);
                this.columnRelationship = new global::System.Data.DataColumn("Relationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship);
                this.columnJob = new global::System.Data.DataColumn("Job", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnSubDivision = new global::System.Data.DataColumn("SubDivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubDivision);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnCellphone = new global::System.Data.DataColumn("Cellphone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellphone);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMemberId}, true));
                this.columnMemberId.AllowDBNull = false;
                this.columnMemberId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow NewdtFamilyInfoRow() {
                return ((dtFamilyInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtFamilyInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtFamilyInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtFamilyInfoRowChanged != null)) {
                    this.dtFamilyInfoRowChanged(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtFamilyInfoRowChanging != null)) {
                    this.dtFamilyInfoRowChanging(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtFamilyInfoRowDeleted != null)) {
                    this.dtFamilyInfoRowDeleted(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtFamilyInfoRowDeleting != null)) {
                    this.dtFamilyInfoRowDeleting(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtFamilyInfoRow(dtFamilyInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtFamilyInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCellInfoDataTable : global::System.Data.TypedTableBase<dtCellInfoRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnCellName;
            
            private global::System.Data.DataColumn columnStartdate;
            
            private global::System.Data.DataColumn columnEnddate;
            
            private global::System.Data.DataColumn columnCellRole;
            
            private global::System.Data.DataColumn columnNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoDataTable() {
                this.TableName = "dtCellInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCellInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCellInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellNameColumn {
                get {
                    return this.columnCellName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartdateColumn {
                get {
                    return this.columnStartdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnddateColumn {
                get {
                    return this.columnEnddate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellRoleColumn {
                get {
                    return this.columnCellRole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRow this[int index] {
                get {
                    return ((dtCellInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtCellInfoRowChangeEventHandler dtCellInfoRowChanging;
            
            public event dtCellInfoRowChangeEventHandler dtCellInfoRowChanged;
            
            public event dtCellInfoRowChangeEventHandler dtCellInfoRowDeleting;
            
            public event dtCellInfoRowChangeEventHandler dtCellInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCellInfoRow(dtCellInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRow AdddtCellInfoRow(dtMemberInfoRow parentdtMemberInfoRowBydtMemberInfo_dtCellInfo, string CellName, System.DateTime Startdate, System.DateTime Enddate, string CellRole, int No) {
                dtCellInfoRow rowdtCellInfoRow = ((dtCellInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CellName,
                        Startdate,
                        Enddate,
                        CellRole,
                        No};
                if ((parentdtMemberInfoRowBydtMemberInfo_dtCellInfo != null)) {
                    columnValuesArray[0] = parentdtMemberInfoRowBydtMemberInfo_dtCellInfo[0];
                }
                rowdtCellInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCellInfoRow);
                return rowdtCellInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRow FindByNo(int No) {
                return ((dtCellInfoRow)(this.Rows.Find(new object[] {
                            No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCellInfoDataTable cln = ((dtCellInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCellInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnCellName = base.Columns["CellName"];
                this.columnStartdate = base.Columns["Startdate"];
                this.columnEnddate = base.Columns["Enddate"];
                this.columnCellRole = base.Columns["CellRole"];
                this.columnNo = base.Columns["No"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnCellName = new global::System.Data.DataColumn("CellName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellName);
                this.columnStartdate = new global::System.Data.DataColumn("Startdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartdate);
                this.columnEnddate = new global::System.Data.DataColumn("Enddate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnddate);
                this.columnCellRole = new global::System.Data.DataColumn("CellRole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellRole);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNo}, true));
                this.columnNo.AllowDBNull = false;
                this.columnNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRow NewdtCellInfoRow() {
                return ((dtCellInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCellInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCellInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCellInfoRowChanged != null)) {
                    this.dtCellInfoRowChanged(this, new dtCellInfoRowChangeEvent(((dtCellInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCellInfoRowChanging != null)) {
                    this.dtCellInfoRowChanging(this, new dtCellInfoRowChangeEvent(((dtCellInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCellInfoRowDeleted != null)) {
                    this.dtCellInfoRowDeleted(this, new dtCellInfoRowChangeEvent(((dtCellInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCellInfoRowDeleting != null)) {
                    this.dtCellInfoRowDeleting(this, new dtCellInfoRowChangeEvent(((dtCellInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCellInfoRow(dtCellInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCellInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtFellowshipDataTable : global::System.Data.TypedTableBase<dtFellowshipRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnFellowship;
            
            private global::System.Data.DataColumn columnStartdate;
            
            private global::System.Data.DataColumn columnEnddate;
            
            private global::System.Data.DataColumn columnNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipDataTable() {
                this.TableName = "dtFellowship";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFellowshipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtFellowshipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FellowshipColumn {
                get {
                    return this.columnFellowship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartdateColumn {
                get {
                    return this.columnStartdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnddateColumn {
                get {
                    return this.columnEnddate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRow this[int index] {
                get {
                    return ((dtFellowshipRow)(this.Rows[index]));
                }
            }
            
            public event dtFellowshipRowChangeEventHandler dtFellowshipRowChanging;
            
            public event dtFellowshipRowChangeEventHandler dtFellowshipRowChanged;
            
            public event dtFellowshipRowChangeEventHandler dtFellowshipRowDeleting;
            
            public event dtFellowshipRowChangeEventHandler dtFellowshipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtFellowshipRow(dtFellowshipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRow AdddtFellowshipRow(dtMemberInfoRow parentdtMemberInfoRowBydtMemberInfo_dtFellowship, string Fellowship, System.DateTime Startdate, System.DateTime Enddate, int No) {
                dtFellowshipRow rowdtFellowshipRow = ((dtFellowshipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Fellowship,
                        Startdate,
                        Enddate,
                        No};
                if ((parentdtMemberInfoRowBydtMemberInfo_dtFellowship != null)) {
                    columnValuesArray[0] = parentdtMemberInfoRowBydtMemberInfo_dtFellowship[0];
                }
                rowdtFellowshipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtFellowshipRow);
                return rowdtFellowshipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRow FindByNo(int No) {
                return ((dtFellowshipRow)(this.Rows.Find(new object[] {
                            No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtFellowshipDataTable cln = ((dtFellowshipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtFellowshipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnFellowship = base.Columns["Fellowship"];
                this.columnStartdate = base.Columns["Startdate"];
                this.columnEnddate = base.Columns["Enddate"];
                this.columnNo = base.Columns["No"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnFellowship = new global::System.Data.DataColumn("Fellowship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFellowship);
                this.columnStartdate = new global::System.Data.DataColumn("Startdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartdate);
                this.columnEnddate = new global::System.Data.DataColumn("Enddate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnddate);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNo}, true));
                this.columnNo.AllowDBNull = false;
                this.columnNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRow NewdtFellowshipRow() {
                return ((dtFellowshipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtFellowshipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtFellowshipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtFellowshipRowChanged != null)) {
                    this.dtFellowshipRowChanged(this, new dtFellowshipRowChangeEvent(((dtFellowshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtFellowshipRowChanging != null)) {
                    this.dtFellowshipRowChanging(this, new dtFellowshipRowChangeEvent(((dtFellowshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtFellowshipRowDeleted != null)) {
                    this.dtFellowshipRowDeleted(this, new dtFellowshipRowChangeEvent(((dtFellowshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtFellowshipRowDeleting != null)) {
                    this.dtFellowshipRowDeleting(this, new dtFellowshipRowChangeEvent(((dtFellowshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtFellowshipRow(dtFellowshipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtFellowshipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMinistryInfoDataTable : global::System.Data.TypedTableBase<dtMinistryInfoRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnMinistryName;
            
            private global::System.Data.DataColumn columnStartdate;
            
            private global::System.Data.DataColumn columnEnddate;
            
            private global::System.Data.DataColumn columnRoles;
            
            private global::System.Data.DataColumn columnNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoDataTable() {
                this.TableName = "dtMinistryInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMinistryInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMinistryInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinistryNameColumn {
                get {
                    return this.columnMinistryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartdateColumn {
                get {
                    return this.columnStartdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnddateColumn {
                get {
                    return this.columnEnddate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RolesColumn {
                get {
                    return this.columnRoles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRow this[int index] {
                get {
                    return ((dtMinistryInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtMinistryInfoRowChangeEventHandler dtMinistryInfoRowChanging;
            
            public event dtMinistryInfoRowChangeEventHandler dtMinistryInfoRowChanged;
            
            public event dtMinistryInfoRowChangeEventHandler dtMinistryInfoRowDeleting;
            
            public event dtMinistryInfoRowChangeEventHandler dtMinistryInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMinistryInfoRow(dtMinistryInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRow AdddtMinistryInfoRow(dtMemberInfoRow parentdtMemberInfoRowBydtMemberInfo_dtMinistryInfo, string MinistryName, System.DateTime Startdate, System.DateTime Enddate, string Roles, int No) {
                dtMinistryInfoRow rowdtMinistryInfoRow = ((dtMinistryInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MinistryName,
                        Startdate,
                        Enddate,
                        Roles,
                        No};
                if ((parentdtMemberInfoRowBydtMemberInfo_dtMinistryInfo != null)) {
                    columnValuesArray[0] = parentdtMemberInfoRowBydtMemberInfo_dtMinistryInfo[0];
                }
                rowdtMinistryInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMinistryInfoRow);
                return rowdtMinistryInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRow FindByNo(int No) {
                return ((dtMinistryInfoRow)(this.Rows.Find(new object[] {
                            No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMinistryInfoDataTable cln = ((dtMinistryInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMinistryInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnMinistryName = base.Columns["MinistryName"];
                this.columnStartdate = base.Columns["Startdate"];
                this.columnEnddate = base.Columns["Enddate"];
                this.columnRoles = base.Columns["Roles"];
                this.columnNo = base.Columns["No"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnMinistryName = new global::System.Data.DataColumn("MinistryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinistryName);
                this.columnStartdate = new global::System.Data.DataColumn("Startdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartdate);
                this.columnEnddate = new global::System.Data.DataColumn("Enddate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnddate);
                this.columnRoles = new global::System.Data.DataColumn("Roles", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoles);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNo}, true));
                this.columnNo.AllowDBNull = false;
                this.columnNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRow NewdtMinistryInfoRow() {
                return ((dtMinistryInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMinistryInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMinistryInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMinistryInfoRowChanged != null)) {
                    this.dtMinistryInfoRowChanged(this, new dtMinistryInfoRowChangeEvent(((dtMinistryInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMinistryInfoRowChanging != null)) {
                    this.dtMinistryInfoRowChanging(this, new dtMinistryInfoRowChangeEvent(((dtMinistryInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMinistryInfoRowDeleted != null)) {
                    this.dtMinistryInfoRowDeleted(this, new dtMinistryInfoRowChangeEvent(((dtMinistryInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMinistryInfoRowDeleting != null)) {
                    this.dtMinistryInfoRowDeleting(this, new dtMinistryInfoRowChangeEvent(((dtMinistryInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMinistryInfoRow(dtMinistryInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMinistryInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCoursesDataTable : global::System.Data.TypedTableBase<dtCoursesRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnCourseName;
            
            private global::System.Data.DataColumn columnCompleteDate;
            
            private global::System.Data.DataColumn columnNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesDataTable() {
                this.TableName = "dtCourses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCoursesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCoursesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseNameColumn {
                get {
                    return this.columnCourseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteDateColumn {
                get {
                    return this.columnCompleteDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRow this[int index] {
                get {
                    return ((dtCoursesRow)(this.Rows[index]));
                }
            }
            
            public event dtCoursesRowChangeEventHandler dtCoursesRowChanging;
            
            public event dtCoursesRowChangeEventHandler dtCoursesRowChanged;
            
            public event dtCoursesRowChangeEventHandler dtCoursesRowDeleting;
            
            public event dtCoursesRowChangeEventHandler dtCoursesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCoursesRow(dtCoursesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRow AdddtCoursesRow(dtMemberInfoRow parentdtMemberInfoRowBydtMemberInfo_dtCourses, string CourseName, string CompleteDate, int No) {
                dtCoursesRow rowdtCoursesRow = ((dtCoursesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CourseName,
                        CompleteDate,
                        No};
                if ((parentdtMemberInfoRowBydtMemberInfo_dtCourses != null)) {
                    columnValuesArray[0] = parentdtMemberInfoRowBydtMemberInfo_dtCourses[0];
                }
                rowdtCoursesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCoursesRow);
                return rowdtCoursesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRow FindByNo(int No) {
                return ((dtCoursesRow)(this.Rows.Find(new object[] {
                            No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCoursesDataTable cln = ((dtCoursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCoursesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnCourseName = base.Columns["CourseName"];
                this.columnCompleteDate = base.Columns["CompleteDate"];
                this.columnNo = base.Columns["No"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnCourseName = new global::System.Data.DataColumn("CourseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseName);
                this.columnCompleteDate = new global::System.Data.DataColumn("CompleteDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteDate);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNo}, true));
                this.columnNo.AllowDBNull = false;
                this.columnNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRow NewdtCoursesRow() {
                return ((dtCoursesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCoursesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCoursesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCoursesRowChanged != null)) {
                    this.dtCoursesRowChanged(this, new dtCoursesRowChangeEvent(((dtCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCoursesRowChanging != null)) {
                    this.dtCoursesRowChanging(this, new dtCoursesRowChangeEvent(((dtCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCoursesRowDeleted != null)) {
                    this.dtCoursesRowDeleted(this, new dtCoursesRowChangeEvent(((dtCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCoursesRowDeleting != null)) {
                    this.dtCoursesRowDeleting(this, new dtCoursesRowChangeEvent(((dtCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCoursesRow(dtCoursesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCoursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCommentDataTable : global::System.Data.TypedTableBase<dtCommentRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnRegDate;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentDataTable() {
                this.TableName = "dtComment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCommentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCommentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegDateColumn {
                get {
                    return this.columnRegDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRow this[int index] {
                get {
                    return ((dtCommentRow)(this.Rows[index]));
                }
            }
            
            public event dtCommentRowChangeEventHandler dtCommentRowChanging;
            
            public event dtCommentRowChangeEventHandler dtCommentRowChanged;
            
            public event dtCommentRowChangeEventHandler dtCommentRowDeleting;
            
            public event dtCommentRowChangeEventHandler dtCommentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCommentRow(dtCommentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRow AdddtCommentRow(dtMemberInfoRow parentdtMemberInfoRowBydtMemberInfo_dtComment, System.DateTime RegDate, string Comment, int No) {
                dtCommentRow rowdtCommentRow = ((dtCommentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RegDate,
                        Comment,
                        No};
                if ((parentdtMemberInfoRowBydtMemberInfo_dtComment != null)) {
                    columnValuesArray[0] = parentdtMemberInfoRowBydtMemberInfo_dtComment[0];
                }
                rowdtCommentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCommentRow);
                return rowdtCommentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRow FindByNo(int No) {
                return ((dtCommentRow)(this.Rows.Find(new object[] {
                            No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCommentDataTable cln = ((dtCommentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCommentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnRegDate = base.Columns["RegDate"];
                this.columnComment = base.Columns["Comment"];
                this.columnNo = base.Columns["No"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnRegDate = new global::System.Data.DataColumn("RegDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDate);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNo}, true));
                this.columnNo.AllowDBNull = false;
                this.columnNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRow NewdtCommentRow() {
                return ((dtCommentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCommentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCommentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCommentRowChanged != null)) {
                    this.dtCommentRowChanged(this, new dtCommentRowChangeEvent(((dtCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCommentRowChanging != null)) {
                    this.dtCommentRowChanging(this, new dtCommentRowChangeEvent(((dtCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCommentRowDeleted != null)) {
                    this.dtCommentRowDeleted(this, new dtCommentRowChangeEvent(((dtCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCommentRowDeleting != null)) {
                    this.dtCommentRowDeleting(this, new dtCommentRowChangeEvent(((dtCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCommentRow(dtCommentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMemberDetails ds = new dsMemberDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCommentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMemberInfoRow : global::System.Data.DataRow {
            
            private dtMemberInfoDataTable tabledtMemberInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMemberInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMemberInfo = ((dtMemberInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    return ((int)(this[this.tabledtMemberInfo.MemberIdColumn]));
                }
                set {
                    this[this.tabledtMemberInfo.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string En_Name {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.En_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'En_Name\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.En_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.SexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sex\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Birthday {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMemberInfo.BirthdayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Birthday\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.BirthdayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EntryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMemberInfo.EntryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryDate\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.EntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntryType {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.EntryTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryType\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.EntryTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cellname {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.CellnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cellname\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.CellnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellRole {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.CellRoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellRole\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.CellRoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zipcode {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.ZipcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zipcode\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.ZipcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubDivision {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.SubDivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubDivision\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.SubDivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relationship {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.RelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relationship\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.RelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cellphone {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.CellphoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cellphone\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.CellphoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Job {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.JobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Job\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.JobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobType {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.JobTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobType\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.JobTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Married {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.MarriedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Married\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.MarriedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpouseName {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.SpouseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpouseName\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.SpouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Baptism {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.BaptismColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Baptism\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.BaptismColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BaptismDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMemberInfo.BaptismDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaptismDate\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.BaptismDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Office {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.OfficeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Office\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.OfficeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fellowship {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.FellowshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fellowship\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.FellowshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FellowshipDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMemberInfo.FellowshipDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FellowshipDate\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.FellowshipDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinistryList {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.MinistryListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinistryList\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.MinistryListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FamilyId {
                get {
                    try {
                        return ((int)(this[this.tabledtMemberInfo.FamilyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyId\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.FamilyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tabledtMemberInfo.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Home {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.HomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Home\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.HomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Age {
                get {
                    try {
                        return ((string)(this[this.tabledtMemberInfo.AgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Age\' in table \'dtMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMemberInfo.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tabledtMemberInfo.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tabledtMemberInfo.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEn_NameNull() {
                return this.IsNull(this.tabledtMemberInfo.En_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEn_NameNull() {
                this[this.tabledtMemberInfo.En_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tabledtMemberInfo.SexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tabledtMemberInfo.SexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthdayNull() {
                return this.IsNull(this.tabledtMemberInfo.BirthdayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthdayNull() {
                this[this.tabledtMemberInfo.BirthdayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryDateNull() {
                return this.IsNull(this.tabledtMemberInfo.EntryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryDateNull() {
                this[this.tabledtMemberInfo.EntryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryTypeNull() {
                return this.IsNull(this.tabledtMemberInfo.EntryTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryTypeNull() {
                this[this.tabledtMemberInfo.EntryTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellnameNull() {
                return this.IsNull(this.tabledtMemberInfo.CellnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellnameNull() {
                this[this.tabledtMemberInfo.CellnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellRoleNull() {
                return this.IsNull(this.tabledtMemberInfo.CellRoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellRoleNull() {
                this[this.tabledtMemberInfo.CellRoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tabledtMemberInfo.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tabledtMemberInfo.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tabledtMemberInfo.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tabledtMemberInfo.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tabledtMemberInfo.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tabledtMemberInfo.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipcodeNull() {
                return this.IsNull(this.tabledtMemberInfo.ZipcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipcodeNull() {
                this[this.tabledtMemberInfo.ZipcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubDivisionNull() {
                return this.IsNull(this.tabledtMemberInfo.SubDivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubDivisionNull() {
                this[this.tabledtMemberInfo.SubDivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationshipNull() {
                return this.IsNull(this.tabledtMemberInfo.RelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationshipNull() {
                this[this.tabledtMemberInfo.RelationshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellphoneNull() {
                return this.IsNull(this.tabledtMemberInfo.CellphoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellphoneNull() {
                this[this.tabledtMemberInfo.CellphoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNull() {
                return this.IsNull(this.tabledtMemberInfo.JobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNull() {
                this[this.tabledtMemberInfo.JobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobTypeNull() {
                return this.IsNull(this.tabledtMemberInfo.JobTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobTypeNull() {
                this[this.tabledtMemberInfo.JobTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarriedNull() {
                return this.IsNull(this.tabledtMemberInfo.MarriedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarriedNull() {
                this[this.tabledtMemberInfo.MarriedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpouseNameNull() {
                return this.IsNull(this.tabledtMemberInfo.SpouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpouseNameNull() {
                this[this.tabledtMemberInfo.SpouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaptismNull() {
                return this.IsNull(this.tabledtMemberInfo.BaptismColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaptismNull() {
                this[this.tabledtMemberInfo.BaptismColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaptismDateNull() {
                return this.IsNull(this.tabledtMemberInfo.BaptismDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaptismDateNull() {
                this[this.tabledtMemberInfo.BaptismDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOfficeNull() {
                return this.IsNull(this.tabledtMemberInfo.OfficeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOfficeNull() {
                this[this.tabledtMemberInfo.OfficeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFellowshipNull() {
                return this.IsNull(this.tabledtMemberInfo.FellowshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFellowshipNull() {
                this[this.tabledtMemberInfo.FellowshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFellowshipDateNull() {
                return this.IsNull(this.tabledtMemberInfo.FellowshipDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFellowshipDateNull() {
                this[this.tabledtMemberInfo.FellowshipDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinistryListNull() {
                return this.IsNull(this.tabledtMemberInfo.MinistryListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinistryListNull() {
                this[this.tabledtMemberInfo.MinistryListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyIdNull() {
                return this.IsNull(this.tabledtMemberInfo.FamilyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyIdNull() {
                this[this.tabledtMemberInfo.FamilyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tabledtMemberInfo.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tabledtMemberInfo.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tabledtMemberInfo.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tabledtMemberInfo.ImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomeNull() {
                return this.IsNull(this.tabledtMemberInfo.HomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomeNull() {
                this[this.tabledtMemberInfo.HomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tabledtMemberInfo.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tabledtMemberInfo.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRow[] GetdtCellInfoRows() {
                if ((this.Table.ChildRelations["dtMemberInfo_dtCellInfo"] == null)) {
                    return new dtCellInfoRow[0];
                }
                else {
                    return ((dtCellInfoRow[])(base.GetChildRows(this.Table.ChildRelations["dtMemberInfo_dtCellInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRow[] GetdtFellowshipRows() {
                if ((this.Table.ChildRelations["dtMemberInfo_dtFellowship"] == null)) {
                    return new dtFellowshipRow[0];
                }
                else {
                    return ((dtFellowshipRow[])(base.GetChildRows(this.Table.ChildRelations["dtMemberInfo_dtFellowship"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRow[] GetdtMinistryInfoRows() {
                if ((this.Table.ChildRelations["dtMemberInfo_dtMinistryInfo"] == null)) {
                    return new dtMinistryInfoRow[0];
                }
                else {
                    return ((dtMinistryInfoRow[])(base.GetChildRows(this.Table.ChildRelations["dtMemberInfo_dtMinistryInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRow[] GetdtCoursesRows() {
                if ((this.Table.ChildRelations["dtMemberInfo_dtCourses"] == null)) {
                    return new dtCoursesRow[0];
                }
                else {
                    return ((dtCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["dtMemberInfo_dtCourses"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRow[] GetdtCommentRows() {
                if ((this.Table.ChildRelations["dtMemberInfo_dtComment"] == null)) {
                    return new dtCommentRow[0];
                }
                else {
                    return ((dtCommentRow[])(base.GetChildRows(this.Table.ChildRelations["dtMemberInfo_dtComment"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow[] GetdtFamilyInfoRows() {
                if ((this.Table.ChildRelations["dtMemberInfo_dtFamilyInfo"] == null)) {
                    return new dtFamilyInfoRow[0];
                }
                else {
                    return ((dtFamilyInfoRow[])(base.GetChildRows(this.Table.ChildRelations["dtMemberInfo_dtFamilyInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtFamilyInfoRow : global::System.Data.DataRow {
            
            private dtFamilyInfoDataTable tabledtFamilyInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFamilyInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtFamilyInfo = ((dtFamilyInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FamilyId {
                get {
                    try {
                        return ((int)(this[this.tabledtFamilyInfo.FamilyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyId\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.FamilyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    return ((int)(this[this.tabledtFamilyInfo.MemberIdColumn]));
                }
                set {
                    this[this.tabledtFamilyInfo.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Birthdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtFamilyInfo.BirthdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Birthdate\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.BirthdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fellowship {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.FellowshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fellowship\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.FellowshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Baptism {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.BaptismColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Baptism\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.BaptismColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relationship {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.RelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relationship\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.RelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Job {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.JobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Job\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.JobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubDivision {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.SubDivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubDivision\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.SubDivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.SexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sex\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cellphone {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.CellphoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cellphone\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.CellphoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow dtMemberInfoRow {
                get {
                    return ((dtMemberInfoRow)(this.GetParentRow(this.Table.ParentRelations["dtMemberInfo_dtFamilyInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtMemberInfo_dtFamilyInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyIdNull() {
                return this.IsNull(this.tabledtFamilyInfo.FamilyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyIdNull() {
                this[this.tabledtFamilyInfo.FamilyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tabledtFamilyInfo.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tabledtFamilyInfo.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthdateNull() {
                return this.IsNull(this.tabledtFamilyInfo.BirthdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthdateNull() {
                this[this.tabledtFamilyInfo.BirthdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFellowshipNull() {
                return this.IsNull(this.tabledtFamilyInfo.FellowshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFellowshipNull() {
                this[this.tabledtFamilyInfo.FellowshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaptismNull() {
                return this.IsNull(this.tabledtFamilyInfo.BaptismColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaptismNull() {
                this[this.tabledtFamilyInfo.BaptismColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationshipNull() {
                return this.IsNull(this.tabledtFamilyInfo.RelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationshipNull() {
                this[this.tabledtFamilyInfo.RelationshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNull() {
                return this.IsNull(this.tabledtFamilyInfo.JobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNull() {
                this[this.tabledtFamilyInfo.JobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tabledtFamilyInfo.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tabledtFamilyInfo.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubDivisionNull() {
                return this.IsNull(this.tabledtFamilyInfo.SubDivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubDivisionNull() {
                this[this.tabledtFamilyInfo.SubDivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tabledtFamilyInfo.SexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tabledtFamilyInfo.SexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellphoneNull() {
                return this.IsNull(this.tabledtFamilyInfo.CellphoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellphoneNull() {
                this[this.tabledtFamilyInfo.CellphoneColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCellInfoRow : global::System.Data.DataRow {
            
            private dtCellInfoDataTable tabledtCellInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCellInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCellInfo = ((dtCellInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    try {
                        return ((int)(this[this.tabledtCellInfo.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'dtCellInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCellInfo.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellName {
                get {
                    try {
                        return ((string)(this[this.tabledtCellInfo.CellNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellName\' in table \'dtCellInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCellInfo.CellNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Startdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtCellInfo.StartdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Startdate\' in table \'dtCellInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCellInfo.StartdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Enddate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtCellInfo.EnddateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Enddate\' in table \'dtCellInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCellInfo.EnddateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellRole {
                get {
                    try {
                        return ((string)(this[this.tabledtCellInfo.CellRoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellRole\' in table \'dtCellInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCellInfo.CellRoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    return ((int)(this[this.tabledtCellInfo.NoColumn]));
                }
                set {
                    this[this.tabledtCellInfo.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow dtMemberInfoRow {
                get {
                    return ((dtMemberInfoRow)(this.GetParentRow(this.Table.ParentRelations["dtMemberInfo_dtCellInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtMemberInfo_dtCellInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tabledtCellInfo.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tabledtCellInfo.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellNameNull() {
                return this.IsNull(this.tabledtCellInfo.CellNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellNameNull() {
                this[this.tabledtCellInfo.CellNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartdateNull() {
                return this.IsNull(this.tabledtCellInfo.StartdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartdateNull() {
                this[this.tabledtCellInfo.StartdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnddateNull() {
                return this.IsNull(this.tabledtCellInfo.EnddateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnddateNull() {
                this[this.tabledtCellInfo.EnddateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellRoleNull() {
                return this.IsNull(this.tabledtCellInfo.CellRoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellRoleNull() {
                this[this.tabledtCellInfo.CellRoleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtFellowshipRow : global::System.Data.DataRow {
            
            private dtFellowshipDataTable tabledtFellowship;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFellowshipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtFellowship = ((dtFellowshipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    try {
                        return ((int)(this[this.tabledtFellowship.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'dtFellowship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFellowship.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fellowship {
                get {
                    try {
                        return ((string)(this[this.tabledtFellowship.FellowshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fellowship\' in table \'dtFellowship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFellowship.FellowshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Startdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtFellowship.StartdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Startdate\' in table \'dtFellowship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFellowship.StartdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Enddate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtFellowship.EnddateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Enddate\' in table \'dtFellowship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFellowship.EnddateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    return ((int)(this[this.tabledtFellowship.NoColumn]));
                }
                set {
                    this[this.tabledtFellowship.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow dtMemberInfoRow {
                get {
                    return ((dtMemberInfoRow)(this.GetParentRow(this.Table.ParentRelations["dtMemberInfo_dtFellowship"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtMemberInfo_dtFellowship"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tabledtFellowship.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tabledtFellowship.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFellowshipNull() {
                return this.IsNull(this.tabledtFellowship.FellowshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFellowshipNull() {
                this[this.tabledtFellowship.FellowshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartdateNull() {
                return this.IsNull(this.tabledtFellowship.StartdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartdateNull() {
                this[this.tabledtFellowship.StartdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnddateNull() {
                return this.IsNull(this.tabledtFellowship.EnddateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnddateNull() {
                this[this.tabledtFellowship.EnddateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMinistryInfoRow : global::System.Data.DataRow {
            
            private dtMinistryInfoDataTable tabledtMinistryInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMinistryInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMinistryInfo = ((dtMinistryInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    try {
                        return ((int)(this[this.tabledtMinistryInfo.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'dtMinistryInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMinistryInfo.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinistryName {
                get {
                    try {
                        return ((string)(this[this.tabledtMinistryInfo.MinistryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinistryName\' in table \'dtMinistryInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMinistryInfo.MinistryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Startdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMinistryInfo.StartdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Startdate\' in table \'dtMinistryInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMinistryInfo.StartdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Enddate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMinistryInfo.EnddateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Enddate\' in table \'dtMinistryInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMinistryInfo.EnddateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Roles {
                get {
                    try {
                        return ((string)(this[this.tabledtMinistryInfo.RolesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Roles\' in table \'dtMinistryInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMinistryInfo.RolesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    return ((int)(this[this.tabledtMinistryInfo.NoColumn]));
                }
                set {
                    this[this.tabledtMinistryInfo.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow dtMemberInfoRow {
                get {
                    return ((dtMemberInfoRow)(this.GetParentRow(this.Table.ParentRelations["dtMemberInfo_dtMinistryInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtMemberInfo_dtMinistryInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tabledtMinistryInfo.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tabledtMinistryInfo.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinistryNameNull() {
                return this.IsNull(this.tabledtMinistryInfo.MinistryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinistryNameNull() {
                this[this.tabledtMinistryInfo.MinistryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartdateNull() {
                return this.IsNull(this.tabledtMinistryInfo.StartdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartdateNull() {
                this[this.tabledtMinistryInfo.StartdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnddateNull() {
                return this.IsNull(this.tabledtMinistryInfo.EnddateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnddateNull() {
                this[this.tabledtMinistryInfo.EnddateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRolesNull() {
                return this.IsNull(this.tabledtMinistryInfo.RolesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRolesNull() {
                this[this.tabledtMinistryInfo.RolesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCoursesRow : global::System.Data.DataRow {
            
            private dtCoursesDataTable tabledtCourses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCoursesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCourses = ((dtCoursesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    try {
                        return ((int)(this[this.tabledtCourses.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'dtCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCourses.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseName {
                get {
                    try {
                        return ((string)(this[this.tabledtCourses.CourseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseName\' in table \'dtCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCourses.CourseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteDate {
                get {
                    try {
                        return ((string)(this[this.tabledtCourses.CompleteDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteDate\' in table \'dtCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCourses.CompleteDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    return ((int)(this[this.tabledtCourses.NoColumn]));
                }
                set {
                    this[this.tabledtCourses.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow dtMemberInfoRow {
                get {
                    return ((dtMemberInfoRow)(this.GetParentRow(this.Table.ParentRelations["dtMemberInfo_dtCourses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtMemberInfo_dtCourses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tabledtCourses.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tabledtCourses.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseNameNull() {
                return this.IsNull(this.tabledtCourses.CourseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseNameNull() {
                this[this.tabledtCourses.CourseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteDateNull() {
                return this.IsNull(this.tabledtCourses.CompleteDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteDateNull() {
                this[this.tabledtCourses.CompleteDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCommentRow : global::System.Data.DataRow {
            
            private dtCommentDataTable tabledtComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCommentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtComment = ((dtCommentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    try {
                        return ((int)(this[this.tabledtComment.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'dtComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComment.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtComment.RegDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegDate\' in table \'dtComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComment.RegDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tabledtComment.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'dtComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComment.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    return ((int)(this[this.tabledtComment.NoColumn]));
                }
                set {
                    this[this.tabledtComment.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow dtMemberInfoRow {
                get {
                    return ((dtMemberInfoRow)(this.GetParentRow(this.Table.ParentRelations["dtMemberInfo_dtComment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtMemberInfo_dtComment"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tabledtComment.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tabledtComment.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegDateNull() {
                return this.IsNull(this.tabledtComment.RegDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegDateNull() {
                this[this.tabledtComment.RegDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tabledtComment.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tabledtComment.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMemberInfoRowChangeEvent : global::System.EventArgs {
            
            private dtMemberInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRowChangeEvent(dtMemberInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMemberInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtFamilyInfoRowChangeEvent : global::System.EventArgs {
            
            private dtFamilyInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRowChangeEvent(dtFamilyInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCellInfoRowChangeEvent : global::System.EventArgs {
            
            private dtCellInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRowChangeEvent(dtCellInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCellInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtFellowshipRowChangeEvent : global::System.EventArgs {
            
            private dtFellowshipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRowChangeEvent(dtFellowshipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFellowshipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMinistryInfoRowChangeEvent : global::System.EventArgs {
            
            private dtMinistryInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRowChangeEvent(dtMinistryInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMinistryInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCoursesRowChangeEvent : global::System.EventArgs {
            
            private dtCoursesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRowChangeEvent(dtCoursesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCoursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCommentRowChangeEvent : global::System.EventArgs {
            
            private dtCommentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRowChangeEvent(dtCommentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCommentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591