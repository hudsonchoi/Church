//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LandWin.Report.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsCellReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsCellReport : global::System.Data.DataSet {
        
        private Rpt_summaryDataTable tableRpt_summary;
        
        private Rpt_entryDataTable tableRpt_entry;
        
        private global::System.Data.DataRelation relationRpt_summary_Rpt_entry;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsCellReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsCellReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Rpt_summary"] != null)) {
                    base.Tables.Add(new Rpt_summaryDataTable(ds.Tables["Rpt_summary"]));
                }
                if ((ds.Tables["Rpt_entry"] != null)) {
                    base.Tables.Add(new Rpt_entryDataTable(ds.Tables["Rpt_entry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rpt_summaryDataTable Rpt_summary {
            get {
                return this.tableRpt_summary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rpt_entryDataTable Rpt_entry {
            get {
                return this.tableRpt_entry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsCellReport cln = ((dsCellReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Rpt_summary"] != null)) {
                    base.Tables.Add(new Rpt_summaryDataTable(ds.Tables["Rpt_summary"]));
                }
                if ((ds.Tables["Rpt_entry"] != null)) {
                    base.Tables.Add(new Rpt_entryDataTable(ds.Tables["Rpt_entry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRpt_summary = ((Rpt_summaryDataTable)(base.Tables["Rpt_summary"]));
            if ((initTable == true)) {
                if ((this.tableRpt_summary != null)) {
                    this.tableRpt_summary.InitVars();
                }
            }
            this.tableRpt_entry = ((Rpt_entryDataTable)(base.Tables["Rpt_entry"]));
            if ((initTable == true)) {
                if ((this.tableRpt_entry != null)) {
                    this.tableRpt_entry.InitVars();
                }
            }
            this.relationRpt_summary_Rpt_entry = this.Relations["Rpt_summary_Rpt_entry"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsCellReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsCellReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRpt_summary = new Rpt_summaryDataTable();
            base.Tables.Add(this.tableRpt_summary);
            this.tableRpt_entry = new Rpt_entryDataTable();
            base.Tables.Add(this.tableRpt_entry);
            this.relationRpt_summary_Rpt_entry = new global::System.Data.DataRelation("Rpt_summary_Rpt_entry", new global::System.Data.DataColumn[] {
                        this.tableRpt_summary.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRpt_entry.rpt_idColumn}, false);
            this.Relations.Add(this.relationRpt_summary_Rpt_entry);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRpt_summary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRpt_entry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsCellReport ds = new dsCellReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Rpt_summaryRowChangeEventHandler(object sender, Rpt_summaryRowChangeEvent e);
        
        public delegate void Rpt_entryRowChangeEventHandler(object sender, Rpt_entryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rpt_summaryDataTable : global::System.Data.TypedTableBase<Rpt_summaryRow> {
            
            private global::System.Data.DataColumn columncellname;
            
            private global::System.Data.DataColumn columncelllevel1;
            
            private global::System.Data.DataColumn columncellelvel1name;
            
            private global::System.Data.DataColumn columncelllevel2;
            
            private global::System.Data.DataColumn columncellelvel2name;
            
            private global::System.Data.DataColumn columncelldate;
            
            private global::System.Data.DataColumn columnleader;
            
            private global::System.Data.DataColumn columnprayer;
            
            private global::System.Data.DataColumn columnplace;
            
            private global::System.Data.DataColumn columnattendence;
            
            private global::System.Data.DataColumn columnnewmember;
            
            private global::System.Data.DataColumn columnrequest;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnmemo;
            
            private global::System.Data.DataColumn columnattenfamily;
            
            private global::System.Data.DataColumn columntotalfamily;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryDataTable() {
                this.TableName = "Rpt_summary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rpt_summaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rpt_summaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cellnameColumn {
                get {
                    return this.columncellname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn celllevel1Column {
                get {
                    return this.columncelllevel1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cellelvel1nameColumn {
                get {
                    return this.columncellelvel1name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn celllevel2Column {
                get {
                    return this.columncelllevel2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cellelvel2nameColumn {
                get {
                    return this.columncellelvel2name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn celldateColumn {
                get {
                    return this.columncelldate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn leaderColumn {
                get {
                    return this.columnleader;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prayerColumn {
                get {
                    return this.columnprayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn placeColumn {
                get {
                    return this.columnplace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attendenceColumn {
                get {
                    return this.columnattendence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newmemberColumn {
                get {
                    return this.columnnewmember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn requestColumn {
                get {
                    return this.columnrequest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memoColumn {
                get {
                    return this.columnmemo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attenfamilyColumn {
                get {
                    return this.columnattenfamily;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalfamilyColumn {
                get {
                    return this.columntotalfamily;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryRow this[int index] {
                get {
                    return ((Rpt_summaryRow)(this.Rows[index]));
                }
            }
            
            public event Rpt_summaryRowChangeEventHandler Rpt_summaryRowChanging;
            
            public event Rpt_summaryRowChangeEventHandler Rpt_summaryRowChanged;
            
            public event Rpt_summaryRowChangeEventHandler Rpt_summaryRowDeleting;
            
            public event Rpt_summaryRowChangeEventHandler Rpt_summaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRpt_summaryRow(Rpt_summaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryRow AddRpt_summaryRow(
                        string cellname, 
                        string celllevel1, 
                        string cellelvel1name, 
                        string celllevel2, 
                        string cellelvel2name, 
                        System.DateTime celldate, 
                        string leader, 
                        string prayer, 
                        string place, 
                        int attendence, 
                        string newmember, 
                        string request, 
                        string Id, 
                        string memo, 
                        int attenfamily, 
                        string totalfamily) {
                Rpt_summaryRow rowRpt_summaryRow = ((Rpt_summaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cellname,
                        celllevel1,
                        cellelvel1name,
                        celllevel2,
                        cellelvel2name,
                        celldate,
                        leader,
                        prayer,
                        place,
                        attendence,
                        newmember,
                        request,
                        Id,
                        memo,
                        attenfamily,
                        totalfamily};
                rowRpt_summaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRpt_summaryRow);
                return rowRpt_summaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Rpt_summaryDataTable cln = ((Rpt_summaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Rpt_summaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncellname = base.Columns["cellname"];
                this.columncelllevel1 = base.Columns["celllevel1"];
                this.columncellelvel1name = base.Columns["cellelvel1name"];
                this.columncelllevel2 = base.Columns["celllevel2"];
                this.columncellelvel2name = base.Columns["cellelvel2name"];
                this.columncelldate = base.Columns["celldate"];
                this.columnleader = base.Columns["leader"];
                this.columnprayer = base.Columns["prayer"];
                this.columnplace = base.Columns["place"];
                this.columnattendence = base.Columns["attendence"];
                this.columnnewmember = base.Columns["newmember"];
                this.columnrequest = base.Columns["request"];
                this.columnId = base.Columns["Id"];
                this.columnmemo = base.Columns["memo"];
                this.columnattenfamily = base.Columns["attenfamily"];
                this.columntotalfamily = base.Columns["totalfamily"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncellname = new global::System.Data.DataColumn("cellname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncellname);
                this.columncelllevel1 = new global::System.Data.DataColumn("celllevel1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncelllevel1);
                this.columncellelvel1name = new global::System.Data.DataColumn("cellelvel1name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncellelvel1name);
                this.columncelllevel2 = new global::System.Data.DataColumn("celllevel2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncelllevel2);
                this.columncellelvel2name = new global::System.Data.DataColumn("cellelvel2name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncellelvel2name);
                this.columncelldate = new global::System.Data.DataColumn("celldate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncelldate);
                this.columnleader = new global::System.Data.DataColumn("leader", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleader);
                this.columnprayer = new global::System.Data.DataColumn("prayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprayer);
                this.columnplace = new global::System.Data.DataColumn("place", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplace);
                this.columnattendence = new global::System.Data.DataColumn("attendence", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnattendence);
                this.columnnewmember = new global::System.Data.DataColumn("newmember", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewmember);
                this.columnrequest = new global::System.Data.DataColumn("request", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrequest);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnmemo = new global::System.Data.DataColumn("memo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemo);
                this.columnattenfamily = new global::System.Data.DataColumn("attenfamily", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnattenfamily);
                this.columntotalfamily = new global::System.Data.DataColumn("totalfamily", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalfamily);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Rpt_summaryKey1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryRow NewRpt_summaryRow() {
                return ((Rpt_summaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Rpt_summaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Rpt_summaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rpt_summaryRowChanged != null)) {
                    this.Rpt_summaryRowChanged(this, new Rpt_summaryRowChangeEvent(((Rpt_summaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rpt_summaryRowChanging != null)) {
                    this.Rpt_summaryRowChanging(this, new Rpt_summaryRowChangeEvent(((Rpt_summaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rpt_summaryRowDeleted != null)) {
                    this.Rpt_summaryRowDeleted(this, new Rpt_summaryRowChangeEvent(((Rpt_summaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rpt_summaryRowDeleting != null)) {
                    this.Rpt_summaryRowDeleting(this, new Rpt_summaryRowChangeEvent(((Rpt_summaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRpt_summaryRow(Rpt_summaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCellReport ds = new dsCellReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rpt_summaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rpt_entryDataTable : global::System.Data.TypedTableBase<Rpt_entryRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnrpt_id;
            
            private global::System.Data.DataColumn columnmembername;
            
            private global::System.Data.DataColumn columnattendence;
            
            private global::System.Data.DataColumn columnreason;
            
            private global::System.Data.DataColumn columnmemo;
            
            private global::System.Data.DataColumn columnrole_level;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryDataTable() {
                this.TableName = "Rpt_entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rpt_entryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rpt_entryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rpt_idColumn {
                get {
                    return this.columnrpt_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn membernameColumn {
                get {
                    return this.columnmembername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attendenceColumn {
                get {
                    return this.columnattendence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memoColumn {
                get {
                    return this.columnmemo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn role_levelColumn {
                get {
                    return this.columnrole_level;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryRow this[int index] {
                get {
                    return ((Rpt_entryRow)(this.Rows[index]));
                }
            }
            
            public event Rpt_entryRowChangeEventHandler Rpt_entryRowChanging;
            
            public event Rpt_entryRowChangeEventHandler Rpt_entryRowChanged;
            
            public event Rpt_entryRowChangeEventHandler Rpt_entryRowDeleting;
            
            public event Rpt_entryRowChangeEventHandler Rpt_entryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRpt_entryRow(Rpt_entryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryRow AddRpt_entryRow(string Id, Rpt_summaryRow parentRpt_summaryRowByRpt_summary_Rpt_entry, string membername, bool attendence, string reason, string memo, string role_level) {
                Rpt_entryRow rowRpt_entryRow = ((Rpt_entryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        null,
                        membername,
                        attendence,
                        reason,
                        memo,
                        role_level};
                if ((parentRpt_summaryRowByRpt_summary_Rpt_entry != null)) {
                    columnValuesArray[1] = parentRpt_summaryRowByRpt_summary_Rpt_entry[12];
                }
                rowRpt_entryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRpt_entryRow);
                return rowRpt_entryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Rpt_entryDataTable cln = ((Rpt_entryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Rpt_entryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnrpt_id = base.Columns["rpt_id"];
                this.columnmembername = base.Columns["membername"];
                this.columnattendence = base.Columns["attendence"];
                this.columnreason = base.Columns["reason"];
                this.columnmemo = base.Columns["memo"];
                this.columnrole_level = base.Columns["role_level"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnrpt_id = new global::System.Data.DataColumn("rpt_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrpt_id);
                this.columnmembername = new global::System.Data.DataColumn("membername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmembername);
                this.columnattendence = new global::System.Data.DataColumn("attendence", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnattendence);
                this.columnreason = new global::System.Data.DataColumn("reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columnmemo = new global::System.Data.DataColumn("memo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemo);
                this.columnrole_level = new global::System.Data.DataColumn("role_level", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrole_level);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Rpt_entryKey1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryRow NewRpt_entryRow() {
                return ((Rpt_entryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Rpt_entryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Rpt_entryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rpt_entryRowChanged != null)) {
                    this.Rpt_entryRowChanged(this, new Rpt_entryRowChangeEvent(((Rpt_entryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rpt_entryRowChanging != null)) {
                    this.Rpt_entryRowChanging(this, new Rpt_entryRowChangeEvent(((Rpt_entryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rpt_entryRowDeleted != null)) {
                    this.Rpt_entryRowDeleted(this, new Rpt_entryRowChangeEvent(((Rpt_entryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rpt_entryRowDeleting != null)) {
                    this.Rpt_entryRowDeleting(this, new Rpt_entryRowChangeEvent(((Rpt_entryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRpt_entryRow(Rpt_entryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCellReport ds = new dsCellReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rpt_entryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rpt_summaryRow : global::System.Data.DataRow {
            
            private Rpt_summaryDataTable tableRpt_summary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rpt_summaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRpt_summary = ((Rpt_summaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cellname {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.cellnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cellname\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.cellnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string celllevel1 {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.celllevel1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'celllevel1\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.celllevel1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cellelvel1name {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.cellelvel1nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cellelvel1name\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.cellelvel1nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string celllevel2 {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.celllevel2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'celllevel2\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.celllevel2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cellelvel2name {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.cellelvel2nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cellelvel2name\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.cellelvel2nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime celldate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRpt_summary.celldateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'celldate\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.celldateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string leader {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.leaderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'leader\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.leaderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prayer {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.prayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prayer\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.prayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string place {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.placeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'place\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.placeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int attendence {
                get {
                    try {
                        return ((int)(this[this.tableRpt_summary.attendenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'attendence\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.attendenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string newmember {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.newmemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newmember\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.newmemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string request {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.requestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'request\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.requestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memo {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.memoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memo\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.memoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int attenfamily {
                get {
                    try {
                        return ((int)(this[this.tableRpt_summary.attenfamilyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'attenfamily\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.attenfamilyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string totalfamily {
                get {
                    try {
                        return ((string)(this[this.tableRpt_summary.totalfamilyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalfamily\' in table \'Rpt_summary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_summary.totalfamilyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscellnameNull() {
                return this.IsNull(this.tableRpt_summary.cellnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcellnameNull() {
                this[this.tableRpt_summary.cellnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscelllevel1Null() {
                return this.IsNull(this.tableRpt_summary.celllevel1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcelllevel1Null() {
                this[this.tableRpt_summary.celllevel1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscellelvel1nameNull() {
                return this.IsNull(this.tableRpt_summary.cellelvel1nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcellelvel1nameNull() {
                this[this.tableRpt_summary.cellelvel1nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscelllevel2Null() {
                return this.IsNull(this.tableRpt_summary.celllevel2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcelllevel2Null() {
                this[this.tableRpt_summary.celllevel2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscellelvel2nameNull() {
                return this.IsNull(this.tableRpt_summary.cellelvel2nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcellelvel2nameNull() {
                this[this.tableRpt_summary.cellelvel2nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscelldateNull() {
                return this.IsNull(this.tableRpt_summary.celldateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcelldateNull() {
                this[this.tableRpt_summary.celldateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsleaderNull() {
                return this.IsNull(this.tableRpt_summary.leaderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetleaderNull() {
                this[this.tableRpt_summary.leaderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprayerNull() {
                return this.IsNull(this.tableRpt_summary.prayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprayerNull() {
                this[this.tableRpt_summary.prayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplaceNull() {
                return this.IsNull(this.tableRpt_summary.placeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplaceNull() {
                this[this.tableRpt_summary.placeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsattendenceNull() {
                return this.IsNull(this.tableRpt_summary.attendenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetattendenceNull() {
                this[this.tableRpt_summary.attendenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewmemberNull() {
                return this.IsNull(this.tableRpt_summary.newmemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewmemberNull() {
                this[this.tableRpt_summary.newmemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrequestNull() {
                return this.IsNull(this.tableRpt_summary.requestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrequestNull() {
                this[this.tableRpt_summary.requestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableRpt_summary.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableRpt_summary.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemoNull() {
                return this.IsNull(this.tableRpt_summary.memoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemoNull() {
                this[this.tableRpt_summary.memoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsattenfamilyNull() {
                return this.IsNull(this.tableRpt_summary.attenfamilyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetattenfamilyNull() {
                this[this.tableRpt_summary.attenfamilyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalfamilyNull() {
                return this.IsNull(this.tableRpt_summary.totalfamilyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalfamilyNull() {
                this[this.tableRpt_summary.totalfamilyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryRow[] GetRpt_entryRows() {
                if ((this.Table.ChildRelations["Rpt_summary_Rpt_entry"] == null)) {
                    return new Rpt_entryRow[0];
                }
                else {
                    return ((Rpt_entryRow[])(base.GetChildRows(this.Table.ChildRelations["Rpt_summary_Rpt_entry"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rpt_entryRow : global::System.Data.DataRow {
            
            private Rpt_entryDataTable tableRpt_entry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rpt_entryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRpt_entry = ((Rpt_entryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableRpt_entry.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rpt_id {
                get {
                    try {
                        return ((string)(this[this.tableRpt_entry.rpt_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rpt_id\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.rpt_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string membername {
                get {
                    try {
                        return ((string)(this[this.tableRpt_entry.membernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'membername\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.membernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool attendence {
                get {
                    try {
                        return ((bool)(this[this.tableRpt_entry.attendenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'attendence\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.attendenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableRpt_entry.reasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reason\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.reasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memo {
                get {
                    try {
                        return ((string)(this[this.tableRpt_entry.memoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memo\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.memoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string role_level {
                get {
                    try {
                        return ((string)(this[this.tableRpt_entry.role_levelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'role_level\' in table \'Rpt_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRpt_entry.role_levelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryRow Rpt_summaryRow {
                get {
                    return ((Rpt_summaryRow)(this.GetParentRow(this.Table.ParentRelations["Rpt_summary_Rpt_entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rpt_summary_Rpt_entry"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableRpt_entry.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableRpt_entry.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrpt_idNull() {
                return this.IsNull(this.tableRpt_entry.rpt_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrpt_idNull() {
                this[this.tableRpt_entry.rpt_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmembernameNull() {
                return this.IsNull(this.tableRpt_entry.membernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmembernameNull() {
                this[this.tableRpt_entry.membernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsattendenceNull() {
                return this.IsNull(this.tableRpt_entry.attendenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetattendenceNull() {
                this[this.tableRpt_entry.attendenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableRpt_entry.reasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableRpt_entry.reasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemoNull() {
                return this.IsNull(this.tableRpt_entry.memoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemoNull() {
                this[this.tableRpt_entry.memoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrole_levelNull() {
                return this.IsNull(this.tableRpt_entry.role_levelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrole_levelNull() {
                this[this.tableRpt_entry.role_levelColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rpt_summaryRowChangeEvent : global::System.EventArgs {
            
            private Rpt_summaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryRowChangeEvent(Rpt_summaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_summaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rpt_entryRowChangeEvent : global::System.EventArgs {
            
            private Rpt_entryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryRowChangeEvent(Rpt_entryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rpt_entryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591