//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LandWin.Report.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsCellMemberByFamily")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsCellMemberByFamily : global::System.Data.DataSet {
        
        private dacellinfoDataTable tabledacellinfo;
        
        private dacellfamilyDataTable tabledacellfamily;
        
        private daMemberInfoDataTable tabledaMemberInfo;
        
        private global::System.Data.DataRelation relationdacellinfo_dacellfamily;
        
        private global::System.Data.DataRelation relationdacellfamily_daMemberInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsCellMemberByFamily() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsCellMemberByFamily(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dacellinfo"] != null)) {
                    base.Tables.Add(new dacellinfoDataTable(ds.Tables["dacellinfo"]));
                }
                if ((ds.Tables["dacellfamily"] != null)) {
                    base.Tables.Add(new dacellfamilyDataTable(ds.Tables["dacellfamily"]));
                }
                if ((ds.Tables["daMemberInfo"] != null)) {
                    base.Tables.Add(new daMemberInfoDataTable(ds.Tables["daMemberInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dacellinfoDataTable dacellinfo {
            get {
                return this.tabledacellinfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dacellfamilyDataTable dacellfamily {
            get {
                return this.tabledacellfamily;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public daMemberInfoDataTable daMemberInfo {
            get {
                return this.tabledaMemberInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsCellMemberByFamily cln = ((dsCellMemberByFamily)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dacellinfo"] != null)) {
                    base.Tables.Add(new dacellinfoDataTable(ds.Tables["dacellinfo"]));
                }
                if ((ds.Tables["dacellfamily"] != null)) {
                    base.Tables.Add(new dacellfamilyDataTable(ds.Tables["dacellfamily"]));
                }
                if ((ds.Tables["daMemberInfo"] != null)) {
                    base.Tables.Add(new daMemberInfoDataTable(ds.Tables["daMemberInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledacellinfo = ((dacellinfoDataTable)(base.Tables["dacellinfo"]));
            if ((initTable == true)) {
                if ((this.tabledacellinfo != null)) {
                    this.tabledacellinfo.InitVars();
                }
            }
            this.tabledacellfamily = ((dacellfamilyDataTable)(base.Tables["dacellfamily"]));
            if ((initTable == true)) {
                if ((this.tabledacellfamily != null)) {
                    this.tabledacellfamily.InitVars();
                }
            }
            this.tabledaMemberInfo = ((daMemberInfoDataTable)(base.Tables["daMemberInfo"]));
            if ((initTable == true)) {
                if ((this.tabledaMemberInfo != null)) {
                    this.tabledaMemberInfo.InitVars();
                }
            }
            this.relationdacellinfo_dacellfamily = this.Relations["dacellinfo_dacellfamily"];
            this.relationdacellfamily_daMemberInfo = this.Relations["dacellfamily_daMemberInfo"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsCellMemberByFamily";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsCellMemberByFamily.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledacellinfo = new dacellinfoDataTable();
            base.Tables.Add(this.tabledacellinfo);
            this.tabledacellfamily = new dacellfamilyDataTable();
            base.Tables.Add(this.tabledacellfamily);
            this.tabledaMemberInfo = new daMemberInfoDataTable();
            base.Tables.Add(this.tabledaMemberInfo);
            this.relationdacellinfo_dacellfamily = new global::System.Data.DataRelation("dacellinfo_dacellfamily", new global::System.Data.DataColumn[] {
                        this.tabledacellinfo.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledacellfamily.CellCodeColumn}, false);
            this.Relations.Add(this.relationdacellinfo_dacellfamily);
            this.relationdacellfamily_daMemberInfo = new global::System.Data.DataRelation("dacellfamily_daMemberInfo", new global::System.Data.DataColumn[] {
                        this.tabledacellfamily.FamilyCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tabledaMemberInfo.FamilyCodeColumn}, false);
            this.Relations.Add(this.relationdacellfamily_daMemberInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedacellinfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedacellfamily() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedaMemberInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsCellMemberByFamily ds = new dsCellMemberByFamily();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dacellinfoRowChangeEventHandler(object sender, dacellinfoRowChangeEvent e);
        
        public delegate void dacellfamilyRowChangeEventHandler(object sender, dacellfamilyRowChangeEvent e);
        
        public delegate void daMemberInfoRowChangeEventHandler(object sender, daMemberInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dacellinfoDataTable : global::System.Data.TypedTableBase<dacellinfoRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCellName;
            
            private global::System.Data.DataColumn columnCellLevel1;
            
            private global::System.Data.DataColumn columnCellLevel2;
            
            private global::System.Data.DataColumn columnLevel1Name;
            
            private global::System.Data.DataColumn columnLevel2Name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoDataTable() {
                this.TableName = "dacellinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dacellinfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dacellinfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellNameColumn {
                get {
                    return this.columnCellName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellLevel1Column {
                get {
                    return this.columnCellLevel1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellLevel2Column {
                get {
                    return this.columnCellLevel2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Level1NameColumn {
                get {
                    return this.columnLevel1Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Level2NameColumn {
                get {
                    return this.columnLevel2Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRow this[int index] {
                get {
                    return ((dacellinfoRow)(this.Rows[index]));
                }
            }
            
            public event dacellinfoRowChangeEventHandler dacellinfoRowChanging;
            
            public event dacellinfoRowChangeEventHandler dacellinfoRowChanged;
            
            public event dacellinfoRowChangeEventHandler dacellinfoRowDeleting;
            
            public event dacellinfoRowChangeEventHandler dacellinfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddacellinfoRow(dacellinfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRow AdddacellinfoRow(int ID, string CellName, string CellLevel1, string CellLevel2, string Level1Name, string Level2Name) {
                dacellinfoRow rowdacellinfoRow = ((dacellinfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        CellName,
                        CellLevel1,
                        CellLevel2,
                        Level1Name,
                        Level2Name};
                rowdacellinfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdacellinfoRow);
                return rowdacellinfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRow FindByID(int ID) {
                return ((dacellinfoRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dacellinfoDataTable cln = ((dacellinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dacellinfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCellName = base.Columns["CellName"];
                this.columnCellLevel1 = base.Columns["CellLevel1"];
                this.columnCellLevel2 = base.Columns["CellLevel2"];
                this.columnLevel1Name = base.Columns["Level1Name"];
                this.columnLevel2Name = base.Columns["Level2Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCellName = new global::System.Data.DataColumn("CellName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellName);
                this.columnCellLevel1 = new global::System.Data.DataColumn("CellLevel1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellLevel1);
                this.columnCellLevel2 = new global::System.Data.DataColumn("CellLevel2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellLevel2);
                this.columnLevel1Name = new global::System.Data.DataColumn("Level1Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevel1Name);
                this.columnLevel2Name = new global::System.Data.DataColumn("Level2Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevel2Name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRow NewdacellinfoRow() {
                return ((dacellinfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dacellinfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dacellinfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dacellinfoRowChanged != null)) {
                    this.dacellinfoRowChanged(this, new dacellinfoRowChangeEvent(((dacellinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dacellinfoRowChanging != null)) {
                    this.dacellinfoRowChanging(this, new dacellinfoRowChangeEvent(((dacellinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dacellinfoRowDeleted != null)) {
                    this.dacellinfoRowDeleted(this, new dacellinfoRowChangeEvent(((dacellinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dacellinfoRowDeleting != null)) {
                    this.dacellinfoRowDeleting(this, new dacellinfoRowChangeEvent(((dacellinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedacellinfoRow(dacellinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCellMemberByFamily ds = new dsCellMemberByFamily();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dacellinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dacellfamilyDataTable : global::System.Data.TypedTableBase<dacellfamilyRow> {
            
            private global::System.Data.DataColumn columnCellCode;
            
            private global::System.Data.DataColumn columnCellName;
            
            private global::System.Data.DataColumn columnFamilyCode;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnHome;
            
            private global::System.Data.DataColumn columnRegdate;
            
            private global::System.Data.DataColumn columnStartdate;
            
            private global::System.Data.DataColumn columnMemberName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyDataTable() {
                this.TableName = "dacellfamily";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dacellfamilyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dacellfamilyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellCodeColumn {
                get {
                    return this.columnCellCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellNameColumn {
                get {
                    return this.columnCellName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyCodeColumn {
                get {
                    return this.columnFamilyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomeColumn {
                get {
                    return this.columnHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegdateColumn {
                get {
                    return this.columnRegdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartdateColumn {
                get {
                    return this.columnStartdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberNameColumn {
                get {
                    return this.columnMemberName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRow this[int index] {
                get {
                    return ((dacellfamilyRow)(this.Rows[index]));
                }
            }
            
            public event dacellfamilyRowChangeEventHandler dacellfamilyRowChanging;
            
            public event dacellfamilyRowChangeEventHandler dacellfamilyRowChanged;
            
            public event dacellfamilyRowChangeEventHandler dacellfamilyRowDeleting;
            
            public event dacellfamilyRowChangeEventHandler dacellfamilyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddacellfamilyRow(dacellfamilyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRow AdddacellfamilyRow(dacellinfoRow parentdacellinfoRowBydacellinfo_dacellfamily, string CellName, int FamilyCode, string Address, string Home, System.DateTime Regdate, System.DateTime Startdate, string MemberName) {
                dacellfamilyRow rowdacellfamilyRow = ((dacellfamilyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CellName,
                        FamilyCode,
                        Address,
                        Home,
                        Regdate,
                        Startdate,
                        MemberName};
                if ((parentdacellinfoRowBydacellinfo_dacellfamily != null)) {
                    columnValuesArray[0] = parentdacellinfoRowBydacellinfo_dacellfamily[0];
                }
                rowdacellfamilyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdacellfamilyRow);
                return rowdacellfamilyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dacellfamilyDataTable cln = ((dacellfamilyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dacellfamilyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCellCode = base.Columns["CellCode"];
                this.columnCellName = base.Columns["CellName"];
                this.columnFamilyCode = base.Columns["FamilyCode"];
                this.columnAddress = base.Columns["Address"];
                this.columnHome = base.Columns["Home"];
                this.columnRegdate = base.Columns["Regdate"];
                this.columnStartdate = base.Columns["Startdate"];
                this.columnMemberName = base.Columns["MemberName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCellCode = new global::System.Data.DataColumn("CellCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellCode);
                this.columnCellName = new global::System.Data.DataColumn("CellName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellName);
                this.columnFamilyCode = new global::System.Data.DataColumn("FamilyCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyCode);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnHome = new global::System.Data.DataColumn("Home", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHome);
                this.columnRegdate = new global::System.Data.DataColumn("Regdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegdate);
                this.columnStartdate = new global::System.Data.DataColumn("Startdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartdate);
                this.columnMemberName = new global::System.Data.DataColumn("MemberName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dacellfamilyKey2", new global::System.Data.DataColumn[] {
                                this.columnFamilyCode}, false));
                this.columnFamilyCode.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRow NewdacellfamilyRow() {
                return ((dacellfamilyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dacellfamilyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dacellfamilyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dacellfamilyRowChanged != null)) {
                    this.dacellfamilyRowChanged(this, new dacellfamilyRowChangeEvent(((dacellfamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dacellfamilyRowChanging != null)) {
                    this.dacellfamilyRowChanging(this, new dacellfamilyRowChangeEvent(((dacellfamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dacellfamilyRowDeleted != null)) {
                    this.dacellfamilyRowDeleted(this, new dacellfamilyRowChangeEvent(((dacellfamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dacellfamilyRowDeleting != null)) {
                    this.dacellfamilyRowDeleting(this, new dacellfamilyRowChangeEvent(((dacellfamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedacellfamilyRow(dacellfamilyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCellMemberByFamily ds = new dsCellMemberByFamily();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dacellfamilyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class daMemberInfoDataTable : global::System.Data.TypedTableBase<daMemberInfoRow> {
            
            private global::System.Data.DataColumn columnMemberID;
            
            private global::System.Data.DataColumn columnFamilyCode;
            
            private global::System.Data.DataColumn columnRelationship;
            
            private global::System.Data.DataColumn columnSex;
            
            private global::System.Data.DataColumn columnBirthday;
            
            private global::System.Data.DataColumn columnFellowship;
            
            private global::System.Data.DataColumn columnBaptism;
            
            private global::System.Data.DataColumn columnCellPhone;
            
            private global::System.Data.DataColumn columnJob;
            
            private global::System.Data.DataColumn columnSubdivision;
            
            private global::System.Data.DataColumn columnMemberName;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnPicture;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoDataTable() {
                this.TableName = "daMemberInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal daMemberInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected daMemberInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIDColumn {
                get {
                    return this.columnMemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyCodeColumn {
                get {
                    return this.columnFamilyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationshipColumn {
                get {
                    return this.columnRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthdayColumn {
                get {
                    return this.columnBirthday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FellowshipColumn {
                get {
                    return this.columnFellowship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaptismColumn {
                get {
                    return this.columnBaptism;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellPhoneColumn {
                get {
                    return this.columnCellPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobColumn {
                get {
                    return this.columnJob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionColumn {
                get {
                    return this.columnSubdivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberNameColumn {
                get {
                    return this.columnMemberName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureColumn {
                get {
                    return this.columnPicture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoRow this[int index] {
                get {
                    return ((daMemberInfoRow)(this.Rows[index]));
                }
            }
            
            public event daMemberInfoRowChangeEventHandler daMemberInfoRowChanging;
            
            public event daMemberInfoRowChangeEventHandler daMemberInfoRowChanged;
            
            public event daMemberInfoRowChangeEventHandler daMemberInfoRowDeleting;
            
            public event daMemberInfoRowChangeEventHandler daMemberInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddaMemberInfoRow(daMemberInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoRow AdddaMemberInfoRow(int MemberID, dacellfamilyRow parentdacellfamilyRowBydacellfamily_daMemberInfo, string Relationship, string Sex, System.DateTime Birthday, string Fellowship, string Baptism, string CellPhone, string Job, string Subdivision, string MemberName, string Email, string Picture, string Status) {
                daMemberInfoRow rowdaMemberInfoRow = ((daMemberInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MemberID,
                        null,
                        Relationship,
                        Sex,
                        Birthday,
                        Fellowship,
                        Baptism,
                        CellPhone,
                        Job,
                        Subdivision,
                        MemberName,
                        Email,
                        Picture,
                        Status};
                if ((parentdacellfamilyRowBydacellfamily_daMemberInfo != null)) {
                    columnValuesArray[1] = parentdacellfamilyRowBydacellfamily_daMemberInfo[2];
                }
                rowdaMemberInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdaMemberInfoRow);
                return rowdaMemberInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                daMemberInfoDataTable cln = ((daMemberInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new daMemberInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberID = base.Columns["MemberID"];
                this.columnFamilyCode = base.Columns["FamilyCode"];
                this.columnRelationship = base.Columns["Relationship"];
                this.columnSex = base.Columns["Sex"];
                this.columnBirthday = base.Columns["Birthday"];
                this.columnFellowship = base.Columns["Fellowship"];
                this.columnBaptism = base.Columns["Baptism"];
                this.columnCellPhone = base.Columns["CellPhone"];
                this.columnJob = base.Columns["Job"];
                this.columnSubdivision = base.Columns["Subdivision"];
                this.columnMemberName = base.Columns["MemberName"];
                this.columnEmail = base.Columns["Email"];
                this.columnPicture = base.Columns["Picture"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberID = new global::System.Data.DataColumn("MemberID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberID);
                this.columnFamilyCode = new global::System.Data.DataColumn("FamilyCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyCode);
                this.columnRelationship = new global::System.Data.DataColumn("Relationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnBirthday = new global::System.Data.DataColumn("Birthday", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthday);
                this.columnFellowship = new global::System.Data.DataColumn("Fellowship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFellowship);
                this.columnBaptism = new global::System.Data.DataColumn("Baptism", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaptism);
                this.columnCellPhone = new global::System.Data.DataColumn("CellPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellPhone);
                this.columnJob = new global::System.Data.DataColumn("Job", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob);
                this.columnSubdivision = new global::System.Data.DataColumn("Subdivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivision);
                this.columnMemberName = new global::System.Data.DataColumn("MemberName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberName);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnPicture = new global::System.Data.DataColumn("Picture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPicture);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DataTable1Key1", new global::System.Data.DataColumn[] {
                                this.columnMemberID}, false));
                this.columnMemberID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoRow NewdaMemberInfoRow() {
                return ((daMemberInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new daMemberInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(daMemberInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.daMemberInfoRowChanged != null)) {
                    this.daMemberInfoRowChanged(this, new daMemberInfoRowChangeEvent(((daMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.daMemberInfoRowChanging != null)) {
                    this.daMemberInfoRowChanging(this, new daMemberInfoRowChangeEvent(((daMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.daMemberInfoRowDeleted != null)) {
                    this.daMemberInfoRowDeleted(this, new daMemberInfoRowChangeEvent(((daMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.daMemberInfoRowDeleting != null)) {
                    this.daMemberInfoRowDeleting(this, new daMemberInfoRowChangeEvent(((daMemberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedaMemberInfoRow(daMemberInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCellMemberByFamily ds = new dsCellMemberByFamily();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "daMemberInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dacellinfoRow : global::System.Data.DataRow {
            
            private dacellinfoDataTable tabledacellinfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dacellinfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledacellinfo = ((dacellinfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tabledacellinfo.IDColumn]));
                }
                set {
                    this[this.tabledacellinfo.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellName {
                get {
                    try {
                        return ((string)(this[this.tabledacellinfo.CellNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellName\' in table \'dacellinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellinfo.CellNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellLevel1 {
                get {
                    try {
                        return ((string)(this[this.tabledacellinfo.CellLevel1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellLevel1\' in table \'dacellinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellinfo.CellLevel1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellLevel2 {
                get {
                    try {
                        return ((string)(this[this.tabledacellinfo.CellLevel2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellLevel2\' in table \'dacellinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellinfo.CellLevel2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Level1Name {
                get {
                    try {
                        return ((string)(this[this.tabledacellinfo.Level1NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Level1Name\' in table \'dacellinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellinfo.Level1NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Level2Name {
                get {
                    try {
                        return ((string)(this[this.tabledacellinfo.Level2NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Level2Name\' in table \'dacellinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellinfo.Level2NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellNameNull() {
                return this.IsNull(this.tabledacellinfo.CellNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellNameNull() {
                this[this.tabledacellinfo.CellNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellLevel1Null() {
                return this.IsNull(this.tabledacellinfo.CellLevel1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellLevel1Null() {
                this[this.tabledacellinfo.CellLevel1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellLevel2Null() {
                return this.IsNull(this.tabledacellinfo.CellLevel2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellLevel2Null() {
                this[this.tabledacellinfo.CellLevel2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevel1NameNull() {
                return this.IsNull(this.tabledacellinfo.Level1NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevel1NameNull() {
                this[this.tabledacellinfo.Level1NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevel2NameNull() {
                return this.IsNull(this.tabledacellinfo.Level2NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevel2NameNull() {
                this[this.tabledacellinfo.Level2NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRow[] GetdacellfamilyRows() {
                if ((this.Table.ChildRelations["dacellinfo_dacellfamily"] == null)) {
                    return new dacellfamilyRow[0];
                }
                else {
                    return ((dacellfamilyRow[])(base.GetChildRows(this.Table.ChildRelations["dacellinfo_dacellfamily"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dacellfamilyRow : global::System.Data.DataRow {
            
            private dacellfamilyDataTable tabledacellfamily;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dacellfamilyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledacellfamily = ((dacellfamilyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CellCode {
                get {
                    try {
                        return ((int)(this[this.tabledacellfamily.CellCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellCode\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.CellCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellName {
                get {
                    try {
                        return ((string)(this[this.tabledacellfamily.CellNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellName\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.CellNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FamilyCode {
                get {
                    try {
                        return ((int)(this[this.tabledacellfamily.FamilyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyCode\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.FamilyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tabledacellfamily.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Home {
                get {
                    try {
                        return ((string)(this[this.tabledacellfamily.HomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Home\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.HomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Regdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledacellfamily.RegdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Regdate\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.RegdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Startdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledacellfamily.StartdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Startdate\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.StartdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MemberName {
                get {
                    try {
                        return ((string)(this[this.tabledacellfamily.MemberNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberName\' in table \'dacellfamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledacellfamily.MemberNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRow dacellinfoRow {
                get {
                    return ((dacellinfoRow)(this.GetParentRow(this.Table.ParentRelations["dacellinfo_dacellfamily"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dacellinfo_dacellfamily"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellCodeNull() {
                return this.IsNull(this.tabledacellfamily.CellCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellCodeNull() {
                this[this.tabledacellfamily.CellCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellNameNull() {
                return this.IsNull(this.tabledacellfamily.CellNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellNameNull() {
                this[this.tabledacellfamily.CellNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyCodeNull() {
                return this.IsNull(this.tabledacellfamily.FamilyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyCodeNull() {
                this[this.tabledacellfamily.FamilyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tabledacellfamily.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tabledacellfamily.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomeNull() {
                return this.IsNull(this.tabledacellfamily.HomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomeNull() {
                this[this.tabledacellfamily.HomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegdateNull() {
                return this.IsNull(this.tabledacellfamily.RegdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegdateNull() {
                this[this.tabledacellfamily.RegdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartdateNull() {
                return this.IsNull(this.tabledacellfamily.StartdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartdateNull() {
                this[this.tabledacellfamily.StartdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberNameNull() {
                return this.IsNull(this.tabledacellfamily.MemberNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberNameNull() {
                this[this.tabledacellfamily.MemberNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoRow[] GetdaMemberInfoRows() {
                if ((this.Table.ChildRelations["dacellfamily_daMemberInfo"] == null)) {
                    return new daMemberInfoRow[0];
                }
                else {
                    return ((daMemberInfoRow[])(base.GetChildRows(this.Table.ChildRelations["dacellfamily_daMemberInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class daMemberInfoRow : global::System.Data.DataRow {
            
            private daMemberInfoDataTable tabledaMemberInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal daMemberInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledaMemberInfo = ((daMemberInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberID {
                get {
                    try {
                        return ((int)(this[this.tabledaMemberInfo.MemberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberID\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.MemberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FamilyCode {
                get {
                    try {
                        return ((int)(this[this.tabledaMemberInfo.FamilyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyCode\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.FamilyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relationship {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.RelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relationship\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.RelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.SexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sex\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Birthday {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledaMemberInfo.BirthdayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Birthday\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.BirthdayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fellowship {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.FellowshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fellowship\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.FellowshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Baptism {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.BaptismColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Baptism\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.BaptismColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellPhone {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.CellPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellPhone\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.CellPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Job {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.JobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Job\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.JobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdivision {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.SubdivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdivision\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.SubdivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MemberName {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.MemberNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberName\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.MemberNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Picture {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.PictureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Picture\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.PictureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tabledaMemberInfo.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'daMemberInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledaMemberInfo.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRow dacellfamilyRow {
                get {
                    return ((dacellfamilyRow)(this.GetParentRow(this.Table.ParentRelations["dacellfamily_daMemberInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dacellfamily_daMemberInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIDNull() {
                return this.IsNull(this.tabledaMemberInfo.MemberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIDNull() {
                this[this.tabledaMemberInfo.MemberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyCodeNull() {
                return this.IsNull(this.tabledaMemberInfo.FamilyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyCodeNull() {
                this[this.tabledaMemberInfo.FamilyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationshipNull() {
                return this.IsNull(this.tabledaMemberInfo.RelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationshipNull() {
                this[this.tabledaMemberInfo.RelationshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tabledaMemberInfo.SexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tabledaMemberInfo.SexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthdayNull() {
                return this.IsNull(this.tabledaMemberInfo.BirthdayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthdayNull() {
                this[this.tabledaMemberInfo.BirthdayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFellowshipNull() {
                return this.IsNull(this.tabledaMemberInfo.FellowshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFellowshipNull() {
                this[this.tabledaMemberInfo.FellowshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaptismNull() {
                return this.IsNull(this.tabledaMemberInfo.BaptismColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaptismNull() {
                this[this.tabledaMemberInfo.BaptismColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellPhoneNull() {
                return this.IsNull(this.tabledaMemberInfo.CellPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellPhoneNull() {
                this[this.tabledaMemberInfo.CellPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNull() {
                return this.IsNull(this.tabledaMemberInfo.JobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNull() {
                this[this.tabledaMemberInfo.JobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionNull() {
                return this.IsNull(this.tabledaMemberInfo.SubdivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionNull() {
                this[this.tabledaMemberInfo.SubdivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberNameNull() {
                return this.IsNull(this.tabledaMemberInfo.MemberNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberNameNull() {
                this[this.tabledaMemberInfo.MemberNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tabledaMemberInfo.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tabledaMemberInfo.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureNull() {
                return this.IsNull(this.tabledaMemberInfo.PictureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureNull() {
                this[this.tabledaMemberInfo.PictureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tabledaMemberInfo.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tabledaMemberInfo.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dacellinfoRowChangeEvent : global::System.EventArgs {
            
            private dacellinfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRowChangeEvent(dacellinfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dacellfamilyRowChangeEvent : global::System.EventArgs {
            
            private dacellfamilyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRowChangeEvent(dacellfamilyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dacellfamilyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class daMemberInfoRowChangeEvent : global::System.EventArgs {
            
            private daMemberInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoRowChangeEvent(daMemberInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public daMemberInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591