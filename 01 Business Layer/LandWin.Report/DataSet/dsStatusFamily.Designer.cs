//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LandWin.Report.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsStatusFamily")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsStatusFamily : global::System.Data.DataSet {
        
        private dtStatusSumDataTable tabledtStatusSum;
        
        private dtFamilyInfoDataTable tabledtFamilyInfo;
        
        private global::System.Data.DataRelation relationdtStatusSum_dtFamilyInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsStatusFamily() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsStatusFamily(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtStatusSum"] != null)) {
                    base.Tables.Add(new dtStatusSumDataTable(ds.Tables["dtStatusSum"]));
                }
                if ((ds.Tables["dtFamilyInfo"] != null)) {
                    base.Tables.Add(new dtFamilyInfoDataTable(ds.Tables["dtFamilyInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtStatusSumDataTable dtStatusSum {
            get {
                return this.tabledtStatusSum;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtFamilyInfoDataTable dtFamilyInfo {
            get {
                return this.tabledtFamilyInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsStatusFamily cln = ((dsStatusFamily)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtStatusSum"] != null)) {
                    base.Tables.Add(new dtStatusSumDataTable(ds.Tables["dtStatusSum"]));
                }
                if ((ds.Tables["dtFamilyInfo"] != null)) {
                    base.Tables.Add(new dtFamilyInfoDataTable(ds.Tables["dtFamilyInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtStatusSum = ((dtStatusSumDataTable)(base.Tables["dtStatusSum"]));
            if ((initTable == true)) {
                if ((this.tabledtStatusSum != null)) {
                    this.tabledtStatusSum.InitVars();
                }
            }
            this.tabledtFamilyInfo = ((dtFamilyInfoDataTable)(base.Tables["dtFamilyInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtFamilyInfo != null)) {
                    this.tabledtFamilyInfo.InitVars();
                }
            }
            this.relationdtStatusSum_dtFamilyInfo = this.Relations["dtStatusSum_dtFamilyInfo"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsStatusFamily";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsStatusFamily.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtStatusSum = new dtStatusSumDataTable();
            base.Tables.Add(this.tabledtStatusSum);
            this.tabledtFamilyInfo = new dtFamilyInfoDataTable();
            base.Tables.Add(this.tabledtFamilyInfo);
            this.relationdtStatusSum_dtFamilyInfo = new global::System.Data.DataRelation("dtStatusSum_dtFamilyInfo", new global::System.Data.DataColumn[] {
                        this.tabledtStatusSum.FamilyIdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledtFamilyInfo.FamilyIdColumn}, false);
            this.Relations.Add(this.relationdtStatusSum_dtFamilyInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtStatusSum() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtFamilyInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsStatusFamily ds = new dsStatusFamily();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtStatusSumRowChangeEventHandler(object sender, dtStatusSumRowChangeEvent e);
        
        public delegate void dtFamilyInfoRowChangeEventHandler(object sender, dtFamilyInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtStatusSumDataTable : global::System.Data.TypedTableBase<dtStatusSumRow> {
            
            private global::System.Data.DataColumn columnNo;
            
            private global::System.Data.DataColumn columnFamilyId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZipcode;
            
            private global::System.Data.DataColumn columnHome;
            
            private global::System.Data.DataColumn columnEntryDate;
            
            private global::System.Data.DataColumn columnReasons;
            
            private global::System.Data.DataColumn columnStatusDate;
            
            private global::System.Data.DataColumn columnStatusName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumDataTable() {
                this.TableName = "dtStatusSum";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtStatusSumDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtStatusSumDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyIdColumn {
                get {
                    return this.columnFamilyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipcodeColumn {
                get {
                    return this.columnZipcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomeColumn {
                get {
                    return this.columnHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryDateColumn {
                get {
                    return this.columnEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonsColumn {
                get {
                    return this.columnReasons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusDateColumn {
                get {
                    return this.columnStatusDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusNameColumn {
                get {
                    return this.columnStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRow this[int index] {
                get {
                    return ((dtStatusSumRow)(this.Rows[index]));
                }
            }
            
            public event dtStatusSumRowChangeEventHandler dtStatusSumRowChanging;
            
            public event dtStatusSumRowChangeEventHandler dtStatusSumRowChanged;
            
            public event dtStatusSumRowChangeEventHandler dtStatusSumRowDeleting;
            
            public event dtStatusSumRowChangeEventHandler dtStatusSumRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtStatusSumRow(dtStatusSumRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRow AdddtStatusSumRow(int No, int FamilyId, string Name, string Address, string City, string State, string Zipcode, string Home, System.DateTime EntryDate, string Reasons, System.DateTime StatusDate, string StatusName) {
                dtStatusSumRow rowdtStatusSumRow = ((dtStatusSumRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        No,
                        FamilyId,
                        Name,
                        Address,
                        City,
                        State,
                        Zipcode,
                        Home,
                        EntryDate,
                        Reasons,
                        StatusDate,
                        StatusName};
                rowdtStatusSumRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtStatusSumRow);
                return rowdtStatusSumRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRow FindByNo(int No) {
                return ((dtStatusSumRow)(this.Rows.Find(new object[] {
                            No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtStatusSumDataTable cln = ((dtStatusSumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtStatusSumDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNo = base.Columns["No"];
                this.columnFamilyId = base.Columns["FamilyId"];
                this.columnName = base.Columns["Name"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZipcode = base.Columns["Zipcode"];
                this.columnHome = base.Columns["Home"];
                this.columnEntryDate = base.Columns["EntryDate"];
                this.columnReasons = base.Columns["Reasons"];
                this.columnStatusDate = base.Columns["StatusDate"];
                this.columnStatusName = base.Columns["StatusName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.columnFamilyId = new global::System.Data.DataColumn("FamilyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZipcode = new global::System.Data.DataColumn("Zipcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipcode);
                this.columnHome = new global::System.Data.DataColumn("Home", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHome);
                this.columnEntryDate = new global::System.Data.DataColumn("EntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                this.columnReasons = new global::System.Data.DataColumn("Reasons", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasons);
                this.columnStatusDate = new global::System.Data.DataColumn("StatusDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusDate);
                this.columnStatusName = new global::System.Data.DataColumn("StatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNo}, true));
                this.columnNo.AllowDBNull = false;
                this.columnNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRow NewdtStatusSumRow() {
                return ((dtStatusSumRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtStatusSumRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtStatusSumRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtStatusSumRowChanged != null)) {
                    this.dtStatusSumRowChanged(this, new dtStatusSumRowChangeEvent(((dtStatusSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtStatusSumRowChanging != null)) {
                    this.dtStatusSumRowChanging(this, new dtStatusSumRowChangeEvent(((dtStatusSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtStatusSumRowDeleted != null)) {
                    this.dtStatusSumRowDeleted(this, new dtStatusSumRowChangeEvent(((dtStatusSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtStatusSumRowDeleting != null)) {
                    this.dtStatusSumRowDeleting(this, new dtStatusSumRowChangeEvent(((dtStatusSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtStatusSumRow(dtStatusSumRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsStatusFamily ds = new dsStatusFamily();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtStatusSumDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtFamilyInfoDataTable : global::System.Data.TypedTableBase<dtFamilyInfoRow> {
            
            private global::System.Data.DataColumn columnRelationship;
            
            private global::System.Data.DataColumn columnFamilyId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnBirthDate;
            
            private global::System.Data.DataColumn columnFellowship;
            
            private global::System.Data.DataColumn columnBaptism;
            
            private global::System.Data.DataColumn columnCellphone;
            
            private global::System.Data.DataColumn columnSubdiv;
            
            private global::System.Data.DataColumn columnJob;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnSex;
            
            private global::System.Data.DataColumn columnMemberId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoDataTable() {
                this.TableName = "dtFamilyInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFamilyInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtFamilyInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationshipColumn {
                get {
                    return this.columnRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyIdColumn {
                get {
                    return this.columnFamilyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FellowshipColumn {
                get {
                    return this.columnFellowship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaptismColumn {
                get {
                    return this.columnBaptism;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellphoneColumn {
                get {
                    return this.columnCellphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivColumn {
                get {
                    return this.columnSubdiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobColumn {
                get {
                    return this.columnJob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow this[int index] {
                get {
                    return ((dtFamilyInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowChanging;
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowChanged;
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowDeleting;
            
            public event dtFamilyInfoRowChangeEventHandler dtFamilyInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtFamilyInfoRow(dtFamilyInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow AdddtFamilyInfoRow(string Relationship, dtStatusSumRow parentdtStatusSumRowBydtStatusSum_dtFamilyInfo, string Name, System.DateTime BirthDate, string Fellowship, string Baptism, string Cellphone, string Subdiv, string Job, string Email, string Sex, int MemberId) {
                dtFamilyInfoRow rowdtFamilyInfoRow = ((dtFamilyInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Relationship,
                        null,
                        Name,
                        BirthDate,
                        Fellowship,
                        Baptism,
                        Cellphone,
                        Subdiv,
                        Job,
                        Email,
                        Sex,
                        MemberId};
                if ((parentdtStatusSumRowBydtStatusSum_dtFamilyInfo != null)) {
                    columnValuesArray[1] = parentdtStatusSumRowBydtStatusSum_dtFamilyInfo[1];
                }
                rowdtFamilyInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtFamilyInfoRow);
                return rowdtFamilyInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow FindByMemberId(int MemberId) {
                return ((dtFamilyInfoRow)(this.Rows.Find(new object[] {
                            MemberId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtFamilyInfoDataTable cln = ((dtFamilyInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtFamilyInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRelationship = base.Columns["Relationship"];
                this.columnFamilyId = base.Columns["FamilyId"];
                this.columnName = base.Columns["Name"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnFellowship = base.Columns["Fellowship"];
                this.columnBaptism = base.Columns["Baptism"];
                this.columnCellphone = base.Columns["Cellphone"];
                this.columnSubdiv = base.Columns["Subdiv"];
                this.columnJob = base.Columns["Job"];
                this.columnEmail = base.Columns["Email"];
                this.columnSex = base.Columns["Sex"];
                this.columnMemberId = base.Columns["MemberId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRelationship = new global::System.Data.DataColumn("Relationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship);
                this.columnFamilyId = new global::System.Data.DataColumn("FamilyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnBirthDate = new global::System.Data.DataColumn("BirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthDate);
                this.columnFellowship = new global::System.Data.DataColumn("Fellowship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFellowship);
                this.columnBaptism = new global::System.Data.DataColumn("Baptism", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaptism);
                this.columnCellphone = new global::System.Data.DataColumn("Cellphone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellphone);
                this.columnSubdiv = new global::System.Data.DataColumn("Subdiv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdiv);
                this.columnJob = new global::System.Data.DataColumn("Job", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMemberId}, true));
                this.columnMemberId.AllowDBNull = false;
                this.columnMemberId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow NewdtFamilyInfoRow() {
                return ((dtFamilyInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtFamilyInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtFamilyInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtFamilyInfoRowChanged != null)) {
                    this.dtFamilyInfoRowChanged(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtFamilyInfoRowChanging != null)) {
                    this.dtFamilyInfoRowChanging(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtFamilyInfoRowDeleted != null)) {
                    this.dtFamilyInfoRowDeleted(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtFamilyInfoRowDeleting != null)) {
                    this.dtFamilyInfoRowDeleting(this, new dtFamilyInfoRowChangeEvent(((dtFamilyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtFamilyInfoRow(dtFamilyInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsStatusFamily ds = new dsStatusFamily();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtFamilyInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtStatusSumRow : global::System.Data.DataRow {
            
            private dtStatusSumDataTable tabledtStatusSum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtStatusSumRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtStatusSum = ((dtStatusSumDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    return ((int)(this[this.tabledtStatusSum.NoColumn]));
                }
                set {
                    this[this.tabledtStatusSum.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FamilyId {
                get {
                    try {
                        return ((int)(this[this.tabledtStatusSum.FamilyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyId\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.FamilyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zipcode {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.ZipcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zipcode\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.ZipcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Home {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.HomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Home\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.HomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EntryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtStatusSum.EntryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryDate\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.EntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reasons {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.ReasonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reasons\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.ReasonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StatusDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtStatusSum.StatusDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusDate\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.StatusDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusName {
                get {
                    try {
                        return ((string)(this[this.tabledtStatusSum.StatusNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusName\' in table \'dtStatusSum\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtStatusSum.StatusNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyIdNull() {
                return this.IsNull(this.tabledtStatusSum.FamilyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyIdNull() {
                this[this.tabledtStatusSum.FamilyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tabledtStatusSum.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tabledtStatusSum.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tabledtStatusSum.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tabledtStatusSum.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tabledtStatusSum.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tabledtStatusSum.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tabledtStatusSum.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tabledtStatusSum.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipcodeNull() {
                return this.IsNull(this.tabledtStatusSum.ZipcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipcodeNull() {
                this[this.tabledtStatusSum.ZipcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomeNull() {
                return this.IsNull(this.tabledtStatusSum.HomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomeNull() {
                this[this.tabledtStatusSum.HomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryDateNull() {
                return this.IsNull(this.tabledtStatusSum.EntryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryDateNull() {
                this[this.tabledtStatusSum.EntryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonsNull() {
                return this.IsNull(this.tabledtStatusSum.ReasonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonsNull() {
                this[this.tabledtStatusSum.ReasonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusDateNull() {
                return this.IsNull(this.tabledtStatusSum.StatusDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusDateNull() {
                this[this.tabledtStatusSum.StatusDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNameNull() {
                return this.IsNull(this.tabledtStatusSum.StatusNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNameNull() {
                this[this.tabledtStatusSum.StatusNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow[] GetdtFamilyInfoRows() {
                if ((this.Table.ChildRelations["dtStatusSum_dtFamilyInfo"] == null)) {
                    return new dtFamilyInfoRow[0];
                }
                else {
                    return ((dtFamilyInfoRow[])(base.GetChildRows(this.Table.ChildRelations["dtStatusSum_dtFamilyInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtFamilyInfoRow : global::System.Data.DataRow {
            
            private dtFamilyInfoDataTable tabledtFamilyInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFamilyInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtFamilyInfo = ((dtFamilyInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relationship {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.RelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relationship\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.RelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FamilyId {
                get {
                    try {
                        return ((int)(this[this.tabledtFamilyInfo.FamilyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyId\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.FamilyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BirthDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtFamilyInfo.BirthDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BirthDate\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.BirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fellowship {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.FellowshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fellowship\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.FellowshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Baptism {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.BaptismColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Baptism\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.BaptismColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cellphone {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.CellphoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cellphone\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.CellphoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdiv {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.SubdivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdiv\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.SubdivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Job {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.JobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Job\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.JobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyInfo.SexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sex\' in table \'dtFamilyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyInfo.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    return ((int)(this[this.tabledtFamilyInfo.MemberIdColumn]));
                }
                set {
                    this[this.tabledtFamilyInfo.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRow dtStatusSumRow {
                get {
                    return ((dtStatusSumRow)(this.GetParentRow(this.Table.ParentRelations["dtStatusSum_dtFamilyInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dtStatusSum_dtFamilyInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationshipNull() {
                return this.IsNull(this.tabledtFamilyInfo.RelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationshipNull() {
                this[this.tabledtFamilyInfo.RelationshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyIdNull() {
                return this.IsNull(this.tabledtFamilyInfo.FamilyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyIdNull() {
                this[this.tabledtFamilyInfo.FamilyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tabledtFamilyInfo.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tabledtFamilyInfo.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthDateNull() {
                return this.IsNull(this.tabledtFamilyInfo.BirthDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthDateNull() {
                this[this.tabledtFamilyInfo.BirthDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFellowshipNull() {
                return this.IsNull(this.tabledtFamilyInfo.FellowshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFellowshipNull() {
                this[this.tabledtFamilyInfo.FellowshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaptismNull() {
                return this.IsNull(this.tabledtFamilyInfo.BaptismColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaptismNull() {
                this[this.tabledtFamilyInfo.BaptismColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellphoneNull() {
                return this.IsNull(this.tabledtFamilyInfo.CellphoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellphoneNull() {
                this[this.tabledtFamilyInfo.CellphoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivNull() {
                return this.IsNull(this.tabledtFamilyInfo.SubdivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivNull() {
                this[this.tabledtFamilyInfo.SubdivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNull() {
                return this.IsNull(this.tabledtFamilyInfo.JobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNull() {
                this[this.tabledtFamilyInfo.JobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tabledtFamilyInfo.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tabledtFamilyInfo.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tabledtFamilyInfo.SexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tabledtFamilyInfo.SexColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtStatusSumRowChangeEvent : global::System.EventArgs {
            
            private dtStatusSumRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRowChangeEvent(dtStatusSumRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtStatusSumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtFamilyInfoRowChangeEvent : global::System.EventArgs {
            
            private dtFamilyInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRowChangeEvent(dtFamilyInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591